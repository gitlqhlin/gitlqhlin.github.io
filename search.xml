<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>L53域名注册教程</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/L53%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/L53%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="博主前言"><a href="#博主前言" class="headerlink" title="博主前言"></a>博主前言</h2><ul><li>我的教程偏向小白用户，流程简单易懂，当然你也可以不懂，按教程操作即可轻松上手；大佬等进阶用户请随意探索。</li></ul><h3 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h3><ul><li>邮箱，建议使用<strong>谷歌邮箱</strong>或者<strong>outlook邮箱</strong></li></ul><h2 id="域名注册教程"><a href="#域名注册教程" class="headerlink" title="域名注册教程"></a><strong>域名注册教程</strong></h2><p>注册一个一年免费域名：<strong>L53域名</strong><br>注册网址：<a href="https://customer.l53.net/signup"><strong>点击前往注册</strong></a></p><ul><li>注册信息可以通过身份生成器生成</li></ul><p>身份生成器地址：<a href="https://www.shenfendaquan.com/"><strong>点击前往</strong></a></p><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E5%9C%B0%E5%9D%80%E7%94%9F%E6%88%90.png"><ul><li>注册内容填写</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E5%A1%AB%E5%86%99.png"><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>名字</strong>按照身份生成器中名字的前半部分，比如我这次生成的名字<strong>Dean B Vigil</strong>，<strong>Dean</strong>是名字，<strong>Vigil</strong>是姓，<strong>B</strong>是中间名，本次注册可以忽略中间名。</p><p><strong>电子邮件地址</strong>建议使用谷歌邮箱或outlook邮箱</p><p><strong>地址</strong> 即身份生成器中生成的<strong>街道地址</strong>:<strong>2148 Joes Road</strong></p><p><strong>城市</strong> 身份生成器中的简称或全称都可以</p><p><strong>国家</strong> 选择 <strong>United States</strong></p><p><strong>电话号码</strong> 前面是+<strong>1</strong></p><p><strong>Student</strong> 填 <strong>No</strong></p><p><strong>请填写以下表格</strong> 填 <strong>I understand that my information will be scrutinized and any violation of the Terms of Service will lead to the termination of the service.</strong></p><p><strong>你从哪里得知我们？</strong> 填 <strong>google</strong></p><p><strong>密码</strong> 需填写 <strong>大小写和数字</strong></p><p><strong>服务条款</strong> 处要打钩</p><ul><li><p>填写完毕后，到邮箱里面验证邮件地址，点击收到的那条链接即验证成功</p></li><li><p>登录L53账号</p></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E7%99%BB%E5%BD%95.png"><ul><li>登录后，点击 <strong>挡泥板</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E6%8C%A1%E6%B3%A5%E6%9D%BF.png"><ul><li>点击<strong>新订单</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E6%96%B0%E8%AE%A2%E5%8D%95.png"><ul><li>点击<strong>选择产品</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81.png"><ul><li>点击<strong>域名注册和转移</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E8%BD%AC%E7%A7%BB.png"><ul><li>选择ggff.net域名，和输入想要的域名前缀，点击检查</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BC%80%E5%92%8Cggff.png"><ul><li>域名可用，点击下一个</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E4%B8%8B%E4%B8%80%E4%B8%AA.png"><ul><li>复制左侧的 <strong>newuser</strong>，这是优惠券代码，点击有优惠券代码</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E6%9C%89%E4%BC%98%E6%83%A0%E4%BB%A3%E7%A0%81%E5%92%8C%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81.png"><ul><li>粘贴优惠券代码，点击应用</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%B2%98%E8%B4%B4%E4%BC%98%E6%83%A0%E5%88%B8%E4%BB%A3%E7%A0%81%E7%82%B9%E5%BA%94%E7%94%A8.png"><ul><li>看到费用为<strong>0</strong>时，即表示免费，点击收款处</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E6%94%B6%E6%AC%BE%E5%A4%84.png"><h3 id="等待处理完毕即可，一般1-5分钟即可通过"><a href="#等待处理完毕即可，一般1-5分钟即可通过" class="headerlink" title="等待处理完毕即可，一般1-5分钟即可通过"></a>等待处理完毕即可，一般<strong>1-5分钟</strong>即可通过</h3><h4 id="域名注册成功后，可托管到CF"><a href="#域名注册成功后，可托管到CF" class="headerlink" title="域名注册成功后，可托管到CF"></a>域名注册成功后，可托管到CF</h4><ul><li>注册CF账号（通过邮箱注册）</li></ul><p>注册地址：[点击前往]（<a href="https://dash.cloudflare.com/%EF%BC%89">https://dash.cloudflare.com/）</a></p><ul><li><p>点击<strong>添加域</strong></p></li><li><p>输入域名，点击<strong>继续</strong></p></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E8%BE%93%E5%85%A5%E5%9F%9F%E5%90%8D.png"><ul><li>选择Free，点<strong>继续</strong>，再点<strong>继续前往激活</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E9%80%89%E6%8B%A9Free.png"><ul><li><p>跳出弹窗：<strong>以后添加记录</strong>，点<strong>确认</strong></p></li><li><p>分别复制cloudflare分配的两个名称服务器，到L53域名中的<strong>服务</strong>，点击<strong>管理</strong></p></li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E6%9C%8D%E5%8A%A1%E5%92%8C%E7%AE%A1%E7%90%86.png"><ul><li>选择<strong>名称服务器</strong>，删除三个已有的名称服务器（<strong>ns1.topdn.net</strong>、<strong>ns2.topdn.net</strong>、<strong>ns3.topdn.net</strong>），并把cloudflare分配的名称服务器粘贴到<strong>名称服务器 1</strong>和<strong>名称服务器 2</strong>中，点击更新</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E6%9B%B4%E6%96%B0%E5%90%8D%E7%A7%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.png"><p>回到<strong>cloudflare</strong>中点击继续，并点击<strong>立即检查名称服务器</strong></p><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E7%82%B9%E5%87%BB%E6%A3%80%E6%9F%A5%E5%90%8D%E7%A7%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.png"><h2 id="一般等待几分钟就托管成功了！"><a href="#一般等待几分钟就托管成功了！" class="headerlink" title="一般等待几分钟就托管成功了！"></a>一般等待几分钟就托管成功了！</h2><ul><li>点击返回</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E8%BF%94%E5%9B%9Ecloudflare%E9%A6%96%E9%A1%B5.png"><ul><li>显示<strong>活动</strong>就代表托管成功！</li></ul><img src="https://cdn.jsdelivr.net/gh/git80123/tuchuang/img/%E6%98%BE%E7%A4%BA%E6%B4%BB%E5%8A%A8.png"><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无需服务器，GitHub+Vercel部署一个导航站</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8CGitHub-Vercel%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%AF%BC%E8%88%AA%E7%AB%99/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E6%97%A0%E9%9C%80%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8CGitHub-Vercel%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%AF%BC%E8%88%AA%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、github设置："><a href="#一、github设置：" class="headerlink" title="一、github设置："></a>一、github设置：</h2><ol><li><p>fork github项目：<br><a href="https://github.com/xjh22222228/nav">https://github.com/xjh22222228/nav</a></p></li><li><p>申请token:<a href="https://github.com/settings/tokens/new">点击前往</a></p></li><li><p>选择上面两个就可以： <strong>repo</strong> 和 <strong>workflow</strong> ，然后点击最下方的Generate token（生成秘钥）</p></li><li><p>复制token，并保存起来，后续需要（不仅仅是部署需要，后期网站管理后台也需要）</p></li><li><p>到：设置，机密和变量，操作，新建仓库机密，变量名称：<code>nav_env_2</code>（貌似不固定变量名称），值填刚刚生成的token</p></li><li><p>修改 nav.config.yaml 文件：</p></li><li><p>第13行：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/你的用户名/nav</span><br></pre></td></tr></table></figure><ol start="8"><li>第25行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashMode: false</span><br></pre></td></tr></table></figure><ol start="9"><li>第37行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email: &#x27;你的邮箱&#x27;（用于网站被收录通知，可不设置）</span><br></pre></td></tr></table></figure><h2 id="二、vercel部署："><a href="#二、vercel部署：" class="headerlink" title="二、vercel部署："></a>二、vercel部署：</h2><ol><li><p>登录<a href="https://vercel.com/">vercel</a></p></li><li><p>导入刚刚github fork的项目，可不用修改，直接部署，大概一分钟左右完成部署</p></li><li><p>部署完成后，有条件的可绑定一个域名，当然，vercel分配的域名也可以使用</p></li></ol><hr><h2 id="关于设置："><a href="#关于设置：" class="headerlink" title="关于设置："></a>关于设置：</h2><ul><li><p>登录：https:&#x2F;&#x2F;分配的域名或绑定的域名&#x2F;system</p></li><li><p>登录秘钥：github生成的那个秘钥</p></li><li><p>相关设置自行探索，但请遵循开源协议，如果要商用请联系原作者获取授权</p></li></ul><p>联系授权：<a href="https://official.nav3.cn/pricing">https://official.nav3.cn/pricing</a></p><p>免责声明：<a href="https://official.nav3.cn/disclaimers">https://official.nav3.cn/disclaimers</a></p><hr><p>转载自：<a href="https://andytreasurebox.blogspot.com/2025/04/20250navgithubvercel.html">Andy</a></p><p>视频教程：<a href="https://www.youtube.com/watch?v=QhJoov-BLOM">Work Andy</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无vps部署哪吒服务</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E6%97%A0vps%E9%83%A8%E7%BD%B2%E5%93%AA%E5%90%92%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E6%97%A0vps%E9%83%A8%E7%BD%B2%E5%93%AA%E5%90%92%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="三者介绍"><a href="#三者介绍" class="headerlink" title="三者介绍"></a>三者介绍</h2><p>什么是 Koyeb<br>Koyeb 是一个无服务器平台，旨在帮助用户快速部署和管理各种应用程序。它提供简便的部署流程和自动扩展功能，使开发者能够专注于应用本身，而不必担心基础设施的维护。</p><h2 id="什么是-Argo-隧道"><a href="#什么是-Argo-隧道" class="headerlink" title="什么是 Argo 隧道"></a>什么是 Argo 隧道</h2><p>Argo 隧道是 Cloudflare 提供的一项服务，允许用户通过一个安全的隧道将 Web 流量路由到他们的服务器。这样做的好处是无需暴露服务器的真实 IP 地址，同时还能利用 Cloudflare 的性能优化和安全防护功能。</p><h2 id="什么是哪吒服务端"><a href="#什么是哪吒服务端" class="headerlink" title="什么是哪吒服务端"></a>什么是哪吒服务端</h2><p>哪吒服务端是一款开源的网络管理工具，用于监控和管理服务器。它提供实时的流量监控、警报通知和多种统计图表，帮助管理员更好地掌握服务器的运行状态。</p><h2 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h2><p>通过在 Koyeb 上部署哪吒服务端，并使用 Argo 隧道对其进行保护和加速，您可以快速、安全地管理和监控服务器。Koyeb 提供了简便的部署流程，而 Argo 隧道则确保了流量的安全和高效路由。这种组合使得哪吒服务端的部署变得更加便捷和可靠。</p><h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><p><a href="https://www.cloudflare.com/zh-cn/">Cloudflare 账号</a></p><p>域名一枚</p><p><a href="https://github.com/">Github 账号</a></p><p><a href="https://www.koyeb.com/">Koyeb 账号</a></p><h2 id="Cloudflare-和-Github-配置"><a href="#Cloudflare-和-Github-配置" class="headerlink" title="Cloudflare 和 Github 配置"></a>Cloudflare 和 Github 配置</h2><ol><li><p>注册 cloudflare 账户，购买域名，配置环境</p></li><li><p>到 <code>Cloudflare</code> 官网，选择使用的域名，打开 <code>网络</code> 选项将 <code>gRPC</code> 开关打开</p></li><li><p>获取 <code>github</code> 认证授权: <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 面板域名加上 <code>https://</code> 开头，回调地址再加上 <code>/oauth2/callback</code> 结尾</p></li></ol><p><img src="https://686e7a0.webp.li/202407221632299.png"></p><p><img src="https://686e7a0.webp.li/clientID.png"></p><ol start="4"><li>获取 github 的 PAT (Personal Access Token): <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a></li></ol><p><img src="https://686e7a0.webp.li/PAT.png"></p><ol start="5"><li>创建 github 用于备份的私库: <a href="https://github.com/new">https://github.com/new</a></li></ol><p><img src="https://686e7a0.webp.li/%E5%A4%87%E4%BB%BD%E7%9A%84%E7%A7%81%E5%BA%93.png"></p><h2 id="Argo-认证获取方式"><a href="#Argo-认证获取方式" class="headerlink" title="Argo 认证获取方式"></a>Argo 认证获取方式</h2><ul><li>Argo 隧道认证方式有 json 和 token，使用两个方式其中之一。推荐前者，理由脚本会处理好所有的 Argo 隧道参数和路径，后者需要到 Cloudflare 官网手动设置，容易出错。</li></ul><h3 id="获取方式之-JSON"><a href="#获取方式之-JSON" class="headerlink" title="获取方式之 JSON"></a>获取方式之 JSON</h3><ul><li>通过 Cloudflare Json 生成网轻松获取 Argo 隧道 json 信息: <a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a></li></ul><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93json%E4%BF%A1%E6%81%AF.png"></p><h2 id="获取方式之-Token"><a href="#获取方式之-Token" class="headerlink" title="获取方式之 Token"></a>获取方式之 Token</h2><ul><li><p>通过 Cloudflare 官网，手动生成 Argo 隧道 token 信息，到 cf 官网：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p></li><li><p>进入 zero trust 里生成 token 隧道和信息。</p></li><li><p>ssh 路径 22&#x2F;ssh 为 <client id></p></li></ul><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF2.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF3.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF4.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF5.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF6.png"></p><p><img src="https://686e7a0.webp.li/%E9%9A%A7%E9%81%93%E5%92%8C%E4%BF%A1%E6%81%AF7.png"></p><h2 id="PaaS-镜像与环境变量"><a href="#PaaS-镜像与环境变量" class="headerlink" title="PaaS 镜像与环境变量"></a>PaaS 镜像与环境变量</h2><table><thead><tr><th>变量名</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>GH_USER</td><td>是</td><td>github 的用户名，用于面板管理授权</td></tr><tr><td></td><td></td><td></td></tr><tr><td>GH_CLIENTID</td><td>是</td><td>在 github 上申请</td></tr><tr><td></td><td></td><td></td></tr><tr><td>GH_CLIENTSECRET</td><td>是</td><td>在 github 上申请</td></tr><tr><td></td><td></td><td></td></tr><tr><td>GH_BACKUP_USER</td><td>否</td><td>在 github 上备份哪吒服务端数据库的 github 用户名，不填则与面板管理授权的账户 GH_USER 一致</td></tr><tr><td></td><td></td><td></td></tr><tr><td>GH_REPO</td><td>否</td><td>在 github 上备份哪吒服务端数据库文件的 github 库</td></tr><tr><td>GH_EMAIL</td><td>否</td><td>github 的邮箱，用于备份的 git 推送到远程库</td></tr><tr><td>GH_PAT</td><td>否</td><td>GitHub 的 PAT</td></tr><tr><td>REVERSE_PROXY_MODE</td><td>否</td><td>默认使用 Caddy 应用来反代，这时可以不填写该变量；如需 Nginx 或 gRPCwebProxy 反代，请设置该值为 nginx 或 grpcwebproxy</td></tr><tr><td>ARGO_AUTH</td><td>是</td><td>Json: 从 <a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a> 获取的 Argo Json</td></tr><tr><td>ARGO_DOMAIN</td><td>是</td><td>Argo 域名</td></tr><tr><td>NO_AUTO_RENEW</td><td>否</td><td>默认不需要该变量，即每天定时同步在线最新的备份和还原脚本。如不需要该功能，设置此变量，并赋值为 1</td></tr></tbody></table><h2 id="Koyeb-部署实例"><a href="#Koyeb-部署实例" class="headerlink" title="Koyeb 部署实例"></a>Koyeb 部署实例</h2><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B1.png"></p><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B2.png"></p><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B3.png"></p><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B4.png"></p><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B5.png"></p><p><img src="https://686e7a0.webp.li/%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B6.png"></p><h2 id="主体目录文件及说明"><a href="#主体目录文件及说明" class="headerlink" title="主体目录文件及说明"></a>主体目录文件及说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/dashboard/</span><br><span class="line">|-- app                  # 哪吒面板主程序</span><br><span class="line">|-- argo.json            # Argo 隧道 json 文件，记录着使用隧道的信息</span><br><span class="line">|-- argo.yml             # Argo 隧道 yml 文件，用于在一同隧道下，根据不同域名来分流 web, gRPC 和 ssh 协议的作用</span><br><span class="line">|-- backup.sh            # 备份数据脚本</span><br><span class="line">|-- restore.sh           # 还原备份脚本</span><br><span class="line">|-- renew.sh             # 在线更新备份和还原文件的脚本</span><br><span class="line">|-- dbfile               # 记录最新的还原或备份文件名</span><br><span class="line">|-- resource             # 面板主题、语言和旗帜等资料的文件夹</span><br><span class="line">|-- data</span><br><span class="line">|   |-- config.yaml      # 哪吒面板的配置，如 Github OAuth2 / gRPC 域名 / 端口 / 是否启用 TLS 等信息</span><br><span class="line">|   `-- sqlite.db        # SQLite 数据库文件，记录着面板设置的所有 severs 和 cron 等信息</span><br><span class="line">|-- entrypoint.sh        # 主脚本，容器运行后执行</span><br><span class="line">|-- nezha.csr            # SSL/TLS 证书签名请求</span><br><span class="line">|-- nezha.key            # SSL/TLS 证书的私钥信息</span><br><span class="line">|-- nezha.pem            # SSL/TLS 证书文件</span><br><span class="line">|-- cloudflared          # Cloudflare Argo 隧道主程序</span><br><span class="line">|-- grpcwebproxy         # gRPC 反代主程序</span><br><span class="line">|-- caddy                # Caddy 主程序</span><br><span class="line">|-- Caddyfile            # Caddy 配置文件</span><br><span class="line">`-- nezha-agent          # 哪吒客户端，用于监控本地 localhost</span><br></pre></td></tr></table></figure><h2 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点:"></a>项目特点:</h2><ul><li>适用范围更广 — 只要能连通网络，就能安装哪吒服务端，如 LXC, OpenVZ VPS，Nas 虚拟机，Container PaaS 等</li><li>Argo 隧道突破需要公网入口的限制 — 传统的哪吒需要有两个公网端口，一个用于面板的访问，另一个用于客户端上报数据，本项目借用 Cloudflare Argo 隧道，使用内网穿透的办法</li><li>IPv4 &#x2F;v6 具备更高的灵活性 — 传统哪吒需要处理服务端和客户端的 IPv4&#x2F;v6 兼容性问题，还需要通过 warp 等工具来解决不对应的情况。然而，本项目可以完全不需要考虑这些问题，可以任意对接，更加方便和简便</li><li>一条 Argo 隧道分流多个域名和协议 — 建立一条内网穿透的 Argo 隧道，即可分流三个域名 (hostname) 和协议 (protocal)，分别用于面板的访问 (http)，客户端上报数据 (tcp) 和 ssh（可选）</li><li>Grpc 反向代理的 gRPC 数据端口 — 配上证书做 tls 终结，然后 Argo 的隧道配置用 https 服务指向这个反向代理，启用 http2 回源，grpc (nezha)-&gt;Grpc Proxy-&gt;h2 (argo)-&gt;cf cdn edge-&gt;agent</li><li>每天自动备份 — 数据持久化从本地改为线上，北京时间每天 4 时 0 分自动备份整个哪吒面板文件夹到指定的 github 私库，包括面板主题，面板设置，探针数据和隧道信息，备份保留近 5 天数据；鉴于内容十分重要，必须要放在私库</li><li>每天自动更新面板和更新脚本 – 北京时间每天 4 时 0 分自动检测最新的官方面板版本及备份还原脚本，有升级时自动更新</li><li>手 &#x2F; 自一体还原备份 — 每分钟检测一次在线还原文件的内容，遇到有更新立刻还原</li><li>默认内置本机探针 — 能很方便的监控自身服务器信息</li></ul><p><img src="https://686e7a0.webp.li/%E9%BB%98%E8%AE%A4%E5%86%85%E7%BD%AE%E6%9C%AC%E6%9C%BA%E6%8E%A2%E9%92%88.png"></p><hr><p>转载自：<a href="https://www.kejiland.com/post/b461d20a.html">拾荒开拓者</a></p><p>视频教程：<a href="https://www.youtube.com/watch?v=YaQFfMckXFQ">点击前往</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哪吒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云在线音乐播放器</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E7%BD%91%E6%98%93%E4%BA%91%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E7%BD%91%E6%98%93%E4%BA%91%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.aizrf.com/20250122160244716.webp" alt="SPlayer 界面预览"></p><center>▲ SPlayer 高颜值界面设计</center><h2 id="SPlayer-介绍"><a href="#SPlayer-介绍" class="headerlink" title="SPlayer 介绍"></a>SPlayer 介绍</h2><p>SPlayer 是一款基于 <strong>NeteaseCloudMusicApi</strong> 构建的高颜值网易云在线音乐播放器，界面简洁清爽，无广告，在线畅听。此项目前端 (SPlayer) 是由 <strong>imsyy</strong> 开发，采用 <strong>Vue 3 + TypeScript + Naïve UI + Electron</strong> 开发，提供网页版和 Windows 客户端，适配基础的移动端体验。后端API (NeteaseCloudMusicApi) 是由 <strong>Binaryify</strong> 开发并持续维护更新的网易云音乐第三方 API。</p><h3 id="博主前言"><a href="#博主前言" class="headerlink" title="博主前言"></a>博主前言</h3><p>我的教程偏向小白用户，流程简单易懂，当然你也可以不懂，按教程操作即可轻松上手；大佬等进阶用户请随意探索。</p><hr><h2 id="应用特点"><a href="#应用特点" class="headerlink" title="应用特点"></a>应用特点</h2><p>🎵 <strong>登录功能</strong>  </p><ul><li>支持扫码登录  </li><li>支持手机号登录</li></ul><p>🎵 <strong>签到功能</strong>  </p><ul><li>自动每日签到  </li><li>自动云贝签到</li></ul><p>🎵 <strong>桌面歌词</strong>  </p><ul><li>支持桌面歌词显示</li></ul><p>🎵 <strong>本地模式</strong>  </p><ul><li>支持切换为本地播放器，无需网络连接</li></ul><p>🎵 <strong>主题适配</strong>  </p><ul><li>封面主题色自动适应  </li><li>支持全站着色</li></ul><p>🎵 <strong>暗黑模式</strong>  </p><ul><li>支持 <strong>Light &#x2F; Dark &#x2F; Auto</strong> 模式自动切换</li></ul><p>🎵 <strong>本地音乐管理</strong>  </p><ul><li>管理及分类本地歌曲  </li><li>简易编辑音乐标签及修改封面</li></ul><p>🎵 <strong>无版权歌曲播放</strong>  </p><ul><li>支持播放部分无版权歌曲（可能与原曲不匹配，为客户端独占功能）</li></ul><p>🎵 <strong>下载功能</strong>  </p><ul><li>支持下载最高 Hi-Res 音质歌曲（需会员账号）</li></ul><p>🎵 <strong>歌单管理</strong>  </p><ul><li>新建、编辑歌单  </li><li>收藏 &#x2F; 取消收藏歌单或歌手</li></ul><p>🎵 <strong>推荐功能</strong>  </p><ul><li>每日推荐歌曲  </li><li>私人 FM</li></ul><p>🎵 <strong>云盘功能</strong>  </p><ul><li>上传云盘音乐  </li><li>播放云盘内歌曲  </li><li>纠正云盘内歌曲信息  </li><li>删除云盘内歌曲</li></ul><p>🎵 <strong>歌词功能</strong>  </p><ul><li>支持逐字歌词  </li><li>歌词滚动及翻译</li></ul><p>🎵 <strong>视频功能</strong>  </p><ul><li>支持 MV 与视频播放</li></ul><p>🎵 <strong>播放效果</strong>  </p><ul><li>音乐频谱显示  </li><li>音乐渐入渐出效果</li></ul><p>🎵 <strong>PWA 支持</strong>  </p><ul><li>提供渐进式 Web 应用体验</li></ul><p>🎵 <strong>评论区支持</strong>  </p><ul><li>支持评论互动</li></ul><p>🎵 <strong>移动端适配</strong>  </p><ul><li>提供基础的移动端界面支持</li></ul><hr><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><ul><li><strong>域名</strong>（<strong>非必须</strong>，你也可以使用免费域名，或者 <strong>Vercel</strong> 分配的域名也可以）  </li><li><strong>GitHub</strong>（<strong>必须</strong>，你需要注册一个 <strong>GitHub</strong> 帐号）  </li><li><strong>Vercel</strong>（<strong>必须</strong>，你需要注册一个 <strong>Vercel</strong> 帐号，你也可以直接使用 <strong>Vercel</strong> 分配的域名，当然你也可以使用 <strong>Cloudflare</strong> 部署，基本步骤流程一样。）</li></ul><hr><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><h3 id="部署网易云音乐-API"><a href="#部署网易云音乐-API" class="headerlink" title="部署网易云音乐 API"></a>部署网易云音乐 API</h3><ol><li><p><strong>点击前往获取</strong><br>点击前往：<a href="https://gitlab.com/shaoyouvip/neteasecloudmusicapi"><strong>前往gitlab</strong></a></p></li><li><p><strong>在Gitlab Fork 项目</strong><br>打开：<a href="https://gitlab.com/Binaryify/neteasecloudmusicapi">https://gitlab.com/Binaryify/neteasecloudmusicapi</a>，<strong>Fork</strong> 项目。</p><img src="https://img.aizrf.com/20250122040354601.webp"><img src="https://img.aizrf.com/20250122043437358.webp"></li><li><p><strong>部署到 Vercel</strong><br>首先打开：<a href="https://vercel.com/new">https://vercel.com/new</a>去部署 <strong>网易云音乐 API</strong> ，选择 <strong>GitLab</strong> 并选择你 <strong>Fork</strong> 的此项目并点击 <strong>Import</strong>。</p><img src="https://img.aizrf.com/20250122050923389.webp"><img src="https://img.aizrf.com/20250122051004886.webp"></li><li><p><strong>PROJECT NAME</strong> 自己填，这是项目名称，我就默认了，然后直接点 <strong>Deploy</strong> 接着等部署完成即可。 </p><img src="https://img.aizrf.com/20250122051602670.webp"></li></ol><p>5.去控制面板， Domains 下方的地址可以直接打开，其实这个地址也是你的 网易云音乐 API ，但是呢，我们不使用这个地址。因为大陆使用这个vercel提供给你的地址，你基本没法使用被墙的。除非你用科学上网才能正常使用，但你不可能时时刻刻都挂着科学上网吧。</p>   <img src="https://img.aizrf.com/20250122051759283.webp">   <img src="https://img.aizrf.com/20250122051952002.webp"><p>6.给 <strong>网易云音乐 API</strong> 设置 <strong>Vercel-CDN加速</strong> ，使网站项目速度大幅提高，提升国内用户的访问体验，解析成功的域名就是你的 <strong>网易云音乐 API</strong> ，详细教程如下：</p><p>   <a href="https://vercel.001315.xyz/"><strong>https://vercel.001315.xyz/</strong></a></p><p>   到此完成网易云API部署的所有设置，获得 网易云音乐 API 地址，如下图中这个地址是下方步骤填写在 VITE_API_URL 中的切记别写错。</p>   <img src="https://img.aizrf.com/20250130164040158.webp"><hr><h3 id="部署前端-SPlayer"><a href="#部署前端-SPlayer" class="headerlink" title="部署前端 SPlayer"></a>部署前端 SPlayer</h3><ol><li><p><strong>Fork 项目</strong><br>打开：<a href="https://github.com/imsyy/SPlayer">https://github.com/imsyy/SPlayer</a></p><img src="https://img.aizrf.com/20250122040643766.webp"></li><li><p><strong>部署到 Vercel</strong><br>打开：<a href="https://vercel.com/new">https://vercel.com/new</a>，选择 <strong>GitHub</strong> 并选择你 <strong>Fork</strong> 的此项目并点击 <strong>Import</strong>。</p><img src="https://img.aizrf.com/20250122052112474.webp"><img src="https://img.aizrf.com/20250122052345051.webp"></li><li><p>**将 <strong>Build and Output Settings</strong> 中的 <strong>Output Directory</strong> 改为 <strong>out&#x2F;renderer</strong> ， <strong>VITE_API_URL</strong> 改为 <strong>网易云音乐 API 地址</strong> 然后直接点 <strong>Deploy</strong> 这次部署时间较长。等部署完成即可。</p></li></ol><p> <strong>变量设置</strong>  </p><p>VITE_WEB_PORT &#x3D; 14558（默认不改）<br>VITE_SERVER_PORT &#x3D; 25884（默认不改）<br>VITE_API_URL &#x3D; 网易云音乐 API 地址结尾不要加 &#x2F;（设置这一个就行）</p>   <img src="https://img.aizrf.com/20250122053538220.webp">   <ol start="4"><li><p>出现这个页面就部署成功，点击卡片可以进入浏览，但是这次也建议你按照上方设置 Vercel-CDN加速 ，我设置的是<a href="https://music.aizrf.com/">https://music.aizrf.com/</a> 将作为公开项目给大家学习研究使用，禁止用于商业及非法用途。</p><img src="https://img.aizrf.com/20250122054354319.webp"></li><li><p>右上角使用扫码登录，手机号登录貌似有问题，或者我不懂设置，登录后你可以看到你自己创建的歌单，收藏的歌单。</p><img src="https://img.aizrf.com/20250122054900387.webp"></li><li><p>开始畅享你的音乐生活！</p><img src="https://img.aizrf.com/20250122060029189.webp"></li></ol><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>本文所涉及的项目部分功能基于网易云音乐的第三方 API 服务，仅供个人学习和研究使用，严禁用于任何商业或非法用途。</p><p>作为博主，我承诺严格遵守相关法律法规以及网易云音乐 API 的使用协议，不会利用该项目或博文进行任何违法活动。若因使用此项目引发任何纠纷或责任，均由使用者自行承担。博主不对因使用该项目造成的任何直接或间接后果负责，同时保留追究使用者违法行为的权利。</p><p>请使用者在实践中遵守相关法律法规，不得将此项目用于任何商业或非法活动。任何因违规操作而产生的后果均由使用者自行负责。同时，使用者应自行承担因使用此项目而带来的所有风险和责任。博主不对本项目所提供的服务或内容的完整性和可用性做出任何保证。</p><p>感谢您的理解与支持！</p><h2 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h2><p><a href="https://blog.aizrf.com/p/SPlayer-NeteaseCloudMusicApi/">https://blog.aizrf.com/p/SPlayer-NeteaseCloudMusicApi/</a></p><h2 id="博主致谢"><a href="#博主致谢" class="headerlink" title="博主致谢"></a>博主致谢</h2><p>imsyy 提供技术支持！<br>Binaryify 提供技术支持！</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>网易云音乐 在线体验  <a href="https://d.aizrf.com/wyy">https://d.aizrf.com/wyy</a></p><p>SPlayer项目地址 <a href="https://github.com/imsyy/SPlayer/">https://github.com/imsyy/SPlayer/</a></p><p>网易云音乐API <a href="https://gitlab.com/Binaryify/neteasecloudmusicapi/">https://gitlab.com/Binaryify/neteasecloudmusicapi/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过github自动申请SSL证书</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%80%9A%E8%BF%87github%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%80%9A%E8%BF%87github%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="github："><a href="#github：" class="headerlink" title="github："></a>github：</h2><p><a href="https://github.com/danbao/auto-ssl">https://github.com/danbao/auto-ssl</a></p><ol><li><p>下载代码压缩包：<a href="https://github.com/danbao/auto-ssl/archive/refs/heads/main.zip">点击下载</a></p></li><li><p>解压下载的压缩包</p></li><li><p>新建仓库，设为私有</p></li><li><p>上传所有的已解压好的文件（.github文件夹无法直接上传）</p></li><li><p>添加文件：名字“.github&#x2F;”再随意起一个名字（后面要删掉）并提交</p></li><li><p>上传文件：workflows</p></li><li><p>打开CF官网（域名托管的CF账号），点击域名，复制账户ID保存好，点击获取API令牌，创建令牌，选择编辑区域DNS，在区域资源位置的特定区域后选择要申请SSL证书的域名，点击继续，点创建令牌，复制令牌保存好</p></li><li><p>回到github，点设置，机密和变量，操作，新建仓库机密<br>变量：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CF_TOKEN</span><br></pre></td></tr></table></figure><p>令牌</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CF_ACCOUNT_ID</span><br></pre></td></tr></table></figure><p>账户ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EMAIL</span><br></pre></td></tr></table></figure><p>邮箱<br>9. 点击上面的操作选项下的常规，工作流程权限选择读取和写入权限，保存即可</p><ol start="10"><li><p>回到代码首页，点击cloudflare_domains_list.txt文件，编辑，把自己要申请SSL证书的域名输入进去，保存</p></li><li><p>点击actions，选择第一项：cloudflare SSL certificates，运行，等待大概一分钟左右执行完成</p></li><li><p>回到首页，点击SSL文件夹，里面就是申请的证书和私钥</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用爪云部署MOONTV，拥有自己的独享影视站</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8%E7%88%AA%E4%BA%91%E9%83%A8%E7%BD%B2MOONTV/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8%E7%88%AA%E4%BA%91%E9%83%A8%E7%BD%B2MOONTV/</url>
      
        <content type="html"><![CDATA[<h3 id="零成本搭建私人影院！手把手教你用-Cloud-Run-部署-MOON-TV，永久告别-VIP！一分钱不花，5-分钟拥有自己的独享视频网站！"><a href="#零成本搭建私人影院！手把手教你用-Cloud-Run-部署-MOON-TV，永久告别-VIP！一分钱不花，5-分钟拥有自己的独享视频网站！" class="headerlink" title="零成本搭建私人影院！手把手教你用 Cloud Run 部署 MOON TV，永久告别 VIP！一分钱不花，5 分钟拥有自己的独享视频网站！"></a>零成本搭建私人影院！手把手教你用 Cloud Run 部署 MOON TV，永久告别 VIP！一分钱不花，5 分钟拥有自己的独享视频网站！</h3><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li><strong>爪云（claw cloud）</strong>：注册超过180天的GitHub账号可免费使用（每个月5U）</li><li><strong>GitHub项目</strong>：<a href="%5Bhttps://%5D(https://github.com/senshinya/MoonTV)">点击前往</a></li></ol><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><ol><li>打开爪云（claw cloud），点击 <strong>App Launchpad（应用启动板）</strong> ，点击 <strong>Create App（创建应用）</strong></li><li><strong>Application Name（应用名称）</strong> 随意填写都可</li><li><strong>Image Name  （镜像名称）</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghcr.io/senshinya/moontv:latest</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>Usage （使用情况）</strong>：<strong>CPU</strong>和<strong>内存</strong>默认（0.2和256M）</li><li>**Network （网络）**端口为<code>3000</code></li><li>**Environment Variables（环境变量）**可根据自己情况填写：</li></ol><table><thead><tr><th>变量</th><th>说明</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>PASSWORD</td><td>实例访问密码，留空则不启用密码保护</td><td>任意字符串</td><td>（空）</td></tr><tr><td>NEXT_PUBLIC_STORAGE_TYPE</td><td>播放记录&#x2F;收藏的存储方式</td><td>localstorage（本地浏览器存储）、database（后端数据库，暂不支持）</td><td>localstorage</td></tr><tr><td>NEXT_PUBLIC_ENABLE_BLOCKAD</td><td>开启智能去广告功能（实验性）</td><td>true &#x2F; false</td><td>false</td></tr><tr><td>NEXT_PUBLIC_SEARCH_MAX_PAGE</td><td>搜索接口可拉取的最大页数</td><td>1-50</td><td>5</td></tr><tr><td>NEXT_PUBLIC_AGGREGATE_SEARCH_RESULT</td><td>搜索结果默认是否按标题和年份聚合</td><td>true &#x2F; false</td><td>true</td></tr></tbody></table><ol start="7"><li>点击 <strong>Deploy Application（部署应用程序）</strong> 完成部署</li></ol><hr><p>转载自：<a href="%5Bhttps://%5D(https://www.youtube.com/watch?v=8BLMjilaGBw)">搞机零距离</a></p><p><a href="%5Bhttps://%5D(https://gaojilingjuli.blogspot.com/2025/06/cloud-runmoon-tvvip5.html)">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影视站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vercel部署站点监测网站</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8vercel%E9%83%A8%E7%BD%B2%E7%AB%99%E7%82%B9%E7%9B%91%E6%B5%8B%E7%BD%91%E7%AB%99/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8vercel%E9%83%A8%E7%BD%B2%E7%AB%99%E7%82%B9%E7%9B%91%E6%B5%8B%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><h3 id="GitHub：点击前往"><a href="#GitHub：点击前往" class="headerlink" title="GitHub：点击前往"></a>GitHub：<a href="%5Bhttps://%5D(https://github.com/git80123/Uptime-Status)">点击前往</a></h3><h3 id="注册登录：UptimeRobot"><a href="#注册登录：UptimeRobot" class="headerlink" title="注册登录：UptimeRobot"></a>注册登录：<a href="https://uptimerobot.com/">UptimeRobot</a></h3><h3 id="获取-UptimeRobot-API-Key："><a href="#获取-UptimeRobot-API-Key：" class="headerlink" title="获取 UptimeRobot API Key："></a>获取 UptimeRobot API Key：</h3><p><a href="https://dashboard.uptimerobot.com/integrations">https://dashboard.uptimerobot.com/integrations</a></p><h3 id="API-代理说明"><a href="#API-代理说明" class="headerlink" title="API 代理说明"></a>API 代理说明</h3><p>本项目支持以下三种部署方式,均可实现自动处理跨域请求:</p><ol><li><strong>腾讯云 EdgeOne Pages</strong><ul><li>点击上方蓝色 “Deploy” 按钮</li><li>连接到 GitHub，选择项目</li><li>框架预设选择 Vue，点击开始部署</li><li>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></li></ul></li><li><strong>Vercel</strong><ul><li>点击上方黑色 “Deploy” 按钮</li><li>连接到 GitHub，选择项目</li><li>填写项目名称，点击 Create</li><li>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></li></ul></li><li><strong>Cloudflare Pages</strong><ul><li>点击上方橙色 “Deploy” 按钮</li><li>找到计算(worker) 部分</li><li>点击创建，选择 Pages，连接到 GitHub，选择项目，点击开始创建</li><li>框架预设选择 Vue，点击保持并部署</li><li>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></li></ul></li><li><strong>其他平台</strong><ul><li>自行搭建 API 代理</li><li>在 <code>.env</code> 文件中设置 <code>VITE_UPTIMEROBOT_API_URL</code> 为你的 API 代理地址</li></ul></li></ol><h3 id="部署教程（本次教程使用vercel部署）"><a href="#部署教程（本次教程使用vercel部署）" class="headerlink" title="部署教程（本次教程使用vercel部署）"></a>部署教程（本次教程使用vercel部署）</h3><ol><li>登录 <strong>UptimeRobot</strong> 并获取 <strong>UptimeRobot API Key</strong></li><li>点击Deploy前往vercel部署：<a href="https://vercel.com/new/clone?repository-url=https://github.com/JLinmr/uptime-status" title="使用 Vercel 部署"><img src="https://camo.githubusercontent.com/20bea215d35a4e28f2c92ea5b657d006b087687486858a40de2922a4636301ab/68747470733a2f2f76657263656c2e636f6d2f627574746f6e" alt="Deploy with Vercel"></a></li></ol><ul><li>点击上方黑色 “Deploy” 按钮</li><li>连接到 GitHub，选择项目</li><li>填写项目名称，点击 Create</li><li>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></li></ul><ol start="3"><li>环境变量：</li></ol><p><strong>站点名称</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VITE_APP_TITLE</span><br></pre></td></tr></table></figure><p><strong>UptimeRobot API Key</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VITE_UPTIMEROBOT_API_KEY</span><br></pre></td></tr></table></figure><p><strong>路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</span><br></pre></td></tr></table></figure><p>绑定域名即可</p><p>PS:将自己的站点挂在<a href="https://dashboard.uptimerobot.com/">https://dashboard.uptimerobot.com/</a>网站上，打开上面部署好的项目绑定的域名中即可查看网站状态</p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 站点监测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github打包Docker镜像 在抱脸上部署青龙面板</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8Github%E6%89%93%E5%8C%85Docker%E9%95%9C%E5%83%8F-%E5%9C%A8%E6%8A%B1%E8%84%B8%E4%B8%8A%E9%83%A8%E7%BD%B2%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BD%BF%E7%94%A8Github%E6%89%93%E5%8C%85Docker%E9%95%9C%E5%83%8F-%E5%9C%A8%E6%8A%B1%E8%84%B8%E4%B8%8A%E9%83%A8%E7%BD%B2%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>fork github项目：<a href="https://github.com/ykxVK8yL5L/spaces">点击前往</a></p><ol><li>运行action中的：<strong>Build and Push QingLong Docker Image</strong> 大概需要十几分钟</li><li>运行<strong>Build and Push QingLong Docker Image</strong>成功后，回到项目主页，packages出现<strong>spaces&#x2F;qinglong</strong>文件，进入后出现：ghcr.io&#x2F;用户名&#x2F;spaces&#x2F;qinglong:latest，这个需要复制下来，后面要用到</li></ol><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><ol><li>登录抱脸：<a href="https://huggingface.co/">点击前往</a></li><li>点击<strong>new space</strong>创建新项目，名称随便填，选择docker-blank，选择public，点击创建空间</li><li>点击设置，找到<strong>New variable</strong>和<strong>New secret</strong>（新变量，新机密）选择新机密，添加变量，变量名称在QingLong文件中查看：<br>**Space secrets(Private)**说明:<br><code>ADMIN\_USERNAME</code>:登陆用户名<br><code>ADMIN\_PASSWORD</code>:登陆密码<br><code>RCLONE\_CONF</code>:rclone 配置内容，可选<br><code>NOTIFY\_CONFIG</code>:通知配置内容，可选，需要到通知设置里抓包</li></ol><ul><li>用户名和密码是直接在机密变量中创建</li><li><strong>rclone</strong>配置可以选择下面的日本网盘自行注册：<br><a href="https://infini-cloud.net/en/">点击前往</a></li><li>注册好后在<strong>我的页面</strong>-<strong>推荐奖金</strong>中输入**<code>J3BPH</code>**，可多获取5GB空间</li><li>点击<strong>应用程序连接</strong>中的<strong>打开应用程序连接</strong>，并复制<strong>webDAV连接URL</strong></li></ul><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><ol><li>打开创建好的抱脸项目，点击<strong>files</strong>，在<strong>readme.md</strong>文件中进行编辑：<br>添加：<code>app_port: 5700</code>到<strong>sdk: docker</strong>下方增加一行（注意，5700前要有一个空格，可直接复制这里的），例：</li></ol><p>title: Qinglong<br>emoji: 🐠<br>colorFrom: green<br>colorTo: red<br>sdk: docker<br>app_port: 5700<br>pinned: false</p><ol start="2"><li>添加<strong>Dockerfile</strong>文件：<code>FROM ghcr.io/**你的用户名**/spaces/qinglong:latest</code>,(也就是<strong>gihub action</strong>跑完后出现的<strong>spaces&#x2F;qinglong</strong>文件中的那一段)</li><li>点击右上角的更多（三个点）选择<strong>Embed this space</strong>（嵌入此空间），direct URL：<strong>https:&#x2F;&#x2F;你的用户名-qinglong.hf.space</strong>，这个就是登录青龙面板的链接。</li></ol><hr><p><a href="https://www.youtube.com/watch?v=jjmPOXuebi0">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青龙面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助爪云等免费服务零成本上线动态网站</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E5%80%9F%E5%8A%A9%E7%88%AA%E4%BA%91%E7%AD%89%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E9%9B%B6%E6%88%90%E6%9C%AC%E4%B8%8A%E7%BA%BF%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E5%80%9F%E5%8A%A9%E7%88%AA%E4%BA%91%E7%AD%89%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E9%9B%B6%E6%88%90%E6%9C%AC%E4%B8%8A%E7%BA%BF%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>单独购买服务器来运行这样一个小型项目显然不太划算。直到遇到了 ClawCloud，它提供 Docker 容器托管服务，这意味着无论你的应用是什么语言、什么框架写的，只要你能把它打包成一个 Docker 镜像，它就能正常运行。Django 编写的 Python 应用当然也完全适用，更重要的是，ClawCLoud 每月还提供 5 美元的免费额度，对于运行这种轻量级的应用那是绰绰有余了</p><p>ClawCloud 只是提供了让 Web 应用对外访问的能力，那整个 Django 应用又是如何实现更新和部署的呢？其实很简单，这部分也实现了自动化，整体流程是：<strong>编写代码 -&gt; 提交代码到 GitHub 仓库 -&gt; 自动触发 GithubAction 构建镜像 -&gt; 镜像构建完成后自动推送到 DockerHub 仓库 -&gt; 最后在 ClawCloud 上更新镜像即可完成部署并正常访问了</strong></p><p>上述流程可以简化为：GitHub -&gt; DockerHub -&gt; ClawCloud</p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>GitHub 仓库负责代码托管，编写好代码之后直接提交到 GitHub 仓库，然后通过 GitHub Actions 实现在提交代码后自动打包成 Docker 镜像并推送到 DockerHub。这里的核心是 GitHub Acitons，它是 GitHub 提供的一个持续集成与持续交付（CI&#x2F;CD）平台，允许你在 GitHub 上自动化构建、测试、部署等软件开发流程。</p><p>你可以将它理解为一个“自动化的工作流引擎”，与你的代码仓库紧密集成，支持自定义各种任务。更为重要的是 GitHub Actions 对于 GitHub 上的公共仓库是完全免费的，私有仓库也有一定的免费额度，正常个人用户来说完全够用</p><p>利用 GitHub Actions 构建 Docker 镜像并上传到 DockerHub 也比较简单，首先就是需要一个 Dockerfile，Dockerfile 定义了镜像如何构建。以我的项目为例，Dockerfile 放在项目根目录下，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.11.12-slim-bookworm</span><br><span class="line"></span><br><span class="line">WORKDIR /home/project/code</span><br><span class="line"></span><br><span class="line"># 安装构建依赖并替换清华源</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">        build-essential libssl-dev libffi-dev python3-dev git openssh-client \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># 替换为清华大学镜像源</span><br><span class="line">RUN sed -i &#x27;s/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list.d/debian.sources \</span><br><span class="line">    &amp;&amp; sed -i &#x27;s/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apt/sources.list.d/debian.sources</span><br><span class="line"></span><br><span class="line"># 安装 Python 依赖</span><br><span class="line">COPY requirements.txt .</span><br><span class="line">RUN pip3 install --upgrade pip \</span><br><span class="line">    &amp;&amp; pip3 install --no-cache-dir -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 复制项目代码</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># 启动命令</span><br><span class="line">CMD [&quot;python3&quot;, &quot;/home/project/code/manage.py&quot;, &quot;runserver&quot;, &quot;0.0.0.0:8088&quot;]</span><br></pre></td></tr></table></figure><p>然后在项目也就是 Git 仓库中创建一个 <code>.github/workflows</code> 目录，并在里面添加一个 YAML 格式的 CI&#x2F;CD 工作流文件，就算是定义好 GitHub Actions 了。同样以我的项目为例，文件路径为 <code>.github/workflows/docker-build-push.yml</code>，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">name: Build and Push Docker Image</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main    # push main分支则触发</span><br><span class="line">  workflow_dispatch:</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-and-push:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    permissions:</span><br><span class="line">      contents: read</span><br><span class="line">      packages: write</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout code</span><br><span class="line">        uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      - name: Set up Docker Buildx</span><br><span class="line">        uses: docker/setup-buildx-action@v3</span><br><span class="line"></span><br><span class="line">      - name: Login to DockerHub</span><br><span class="line">        uses: docker/login-action@v3</span><br><span class="line">        with:</span><br><span class="line">          username: $&#123;&#123; secrets.DOCKERHUB_USERNAME &#125;&#125;</span><br><span class="line">          password: $&#123;&#123; secrets.DOCKERHUB_TOKEN &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Get git commit short SHA</span><br><span class="line">        id: gitversion</span><br><span class="line">        run: echo &quot;sha_short=$(git rev-parse --short=8 HEAD)&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="line"></span><br><span class="line">      - name: Build and Push Docker Image</span><br><span class="line">        uses: docker/build-push-action@v5</span><br><span class="line">        with:</span><br><span class="line">          context: .</span><br><span class="line">          file: ./Dockerfile</span><br><span class="line">          platforms: linux/amd64,linux/arm64</span><br><span class="line">          tags: |</span><br><span class="line">            37bar/ops-coffee-blog:latest</span><br><span class="line">            37bar/ops-coffee-blog:$&#123;&#123; steps.gitversion.outputs.sha_short &#125;&#125;</span><br><span class="line">          push: true</span><br></pre></td></tr></table></figure><p>这个配置就实现了镜像的打包及上传，需要注意的是，上传镜像到 DockerHub 的话需要 DockerHub 的认证信息。这个认证可以从 DockerHub 获取，获取方法为：登录 DockerHub -&gt; 右上角 Account Settings -&gt; Personal access tokens -&gt; 点击 Generate new token，就能生成新的 Token</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.02.png"></p><p>生成的 Token 需要配置到 GitHub 仓库中，配置方法为：登录 GitHub -&gt; 进入对应的仓库 -&gt; Settings -&gt; Secrets and variables -&gt; Actions -&gt; 点击 New repository secrets 添加两个密钥，分别为 <code>DOCKERHUB_USERNAME</code> 对应 DockerHub 仓库的用户名，<code>DOCKERHUB_TOKEN</code> 为 DockerHub 的 Token，这两个信息在上一步创建 DockerHub 的 Token 时都能获取到</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.03.png"></p><p>GitHub Actions 无需额外开启，密钥配置完成后就能正常使用了。每次 push 代码到 main 分支都会自动触发构建流程，打包镜像并自动上传到 DockerHub</p><h2 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h2><p>整个构建过程中会用到 DockerHub，DockerHub 是 Docker 公司提供的一个云端容器镜像托管服务，允许用户存储和共享他们的 Docker 镜像，通过 DockerHub，开发者可以轻松地发布自己的镜像、下载官方和其他用户的镜像，并且能够自动化构建流程。</p><p>DockerHub 有公共镜像库和私有镜像库，任何人都可以访问和使用公共镜像，用户可以创建私有仓库来存储不想公开分享的镜像，对于私有镜像库，DockerHub 也有免费的额度</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.04.png"></p><p>DockerHub 还支持 Webhook，当新的镜像被推送至 DockerHub 后，可以通过 Webhook 触发外部服务的通知，例如通知持续集成&#x2F;部署系统进行进一步的操作。遗憾的是，ClawCloud 似乎并不支持 Webhook 触发应用重建，不然就能直接镜像更新完成后自动触发 ClawCloud 应用更新了，实现全链路的自动化</p><h2 id="ClawCloud"><a href="#ClawCloud" class="headerlink" title="ClawCloud"></a><a href="https://console.run.claw.cloud/signin?link=9BRETQHLUILQ">ClawCloud</a></h2><p>既然应用已经打包成了 Docker 镜像，那就很容易通过 ClawCloud 来运行并对外提供服务了，打开 ClawCloud 官网，并通过 GitHub 登录，之所以要通过 GitHub 登录，是因为老的 GitHub 账号每个月有 5 美金的免费额度可用。登录 ClawCloud 之后 -&gt; 点击 App Launchpad -&gt; Creat App，填写应用名称、Image 信息、选择实例规格并配置网络映射之后就能可以进行构建了</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.05.png"></p><p>ClawCloud 的使用有几点需要注意：</p><p>1.ClawCloud 对镜像仓库的支持比较友好，不仅支持 DockerHub 的公共镜像仓库镜像，还支持私有镜像仓库的镜像，当配置镜像为私有镜像仓库镜像时输入镜像仓库的地址、账号和密码并保证网络连接即可</p><p>2.配置 Network 时可以指定容器内的端口，并进行映射。同时当开启 <code>Public Access</code> 时还可以配置自定义的域名，通过自定义域名访问容器服务。当然如果没有自定义域名，ClawCloud 也会给你的应用生成一个默认的域名，可以通过这个默认域名进行公网访问</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.06.png"></p><p>3.ClawCloud 也支持配置本地存储，如果你的项目有一些数据需要持久化存储，就可以通过添加 Local Storage 来实现。配置 Local Storage 后，Local Storage 内的数据就不会随着容器销毁而删除。例如我的 Django 应用就直接用了 SQLite 文件数据库，数据库是需要持久存储的，我就用到了 Local Storage 创建了一个新的卷来进行单独存储，实现了数据持久化。当然 ClawCloud 也提供 Database 服务，可以跟应用打通，只是这就要考量免费的 5$ 是否能够负担了</p><p><img src="https://static.ops-coffee.cn/static/images/2025/0624.07.png"></p><p>最后，还是要提醒下，如果你的服务对 SLA 有要求，那还是付费吧，支持下这些平台的可持续发展，对于免费的服务，我们就不要对 SLA 有太高的要求。ClawCloud 虽然整体稳定，但我在使用的这段时间内也遇到过一次故障，很长时间才修复，好在仅仅是后台而已，对 SLA 要求不高，短暂挂掉影响也不大。还是要感谢这些服务提供商提供了这么好用的服务，还免费给用户使用，功德无量</p><hr><p>转载自<a href="https://blog.ops-coffee.cn/s/auto-cicd-with-github-actions-dockerhub-clawcloud.html">运维咖啡吧</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 站点监测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌 Gemini 本地一键部署教程</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E8%B0%B7%E6%AD%8CGemini%E6%9C%AC%E5%9C%B0%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E8%B0%B7%E6%AD%8CGemini%E6%9C%AC%E5%9C%B0%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ol><li><p>获取Google Gemini api<br><a href="https://makersuite.google.com/app/apikey">https://makersuite.google.com/app/apikey</a></p></li><li><p>Gemini代理github项目<br>fork项目：<a href="https://github.com/spectre-pro/gemini-proxy">https://github.com/spectre-pro/gemini-proxy</a></p></li><li><p>点击github中的vercel一键部署按钮</p></li><li><p>绑定域名，如果使用的是托管在cloudflare上的域名，要关闭小黄云</p></li><li><p>下载Cherry Studio AI客户端<br>官网：<a href="https://www.cherry-ai.com/">【点击前往】</a></p></li></ol><p>在Cherry Studio AI客户端点击设置，点击添加</p><ul><li><p>提供商名称：<code>gemini-proxy-api</code></p></li><li><p>提供商类型：<code>Gemini</code></p></li><li><p>模型ID：<code>gemini-2.5-pro</code></p></li><li><p>api地址：绑定的域名（需加https）</p></li></ul><hr><p>视频教程<a href="https://www.youtube.com/watch?v=UVGwtAr01DM">点击前往</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gemini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SubsTracker – 订阅管理与提醒系统 （Cloudflare workers）</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E8%AE%A2%E9%98%85%E7%AE%A1%E7%90%86%E4%B8%8E%E6%8F%90%E9%86%92%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E8%AE%A2%E9%98%85%E7%AE%A1%E7%90%86%E4%B8%8E%E6%8F%90%E9%86%92%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="订阅提醒部署："><a href="#订阅提醒部署：" class="headerlink" title="订阅提醒部署："></a>订阅提醒部署：</h2><ol><li>登陆 Cloudflare,创建 worker,粘贴本项目中的 js 代码,【<a href="https://www.freedidi.com/?golink=aHR0cHM6Ly9naXRodWIuY29tL3dhbmd3YW5naXQvU3Vic1RyYWNrZXI="><strong>点击获取</strong></a>】</li><li>在 Cloudflare 点击左侧：存储和数据库 – KV -创建 KV – 用户和键值都填写： <code>SUBSCRIPTIONS\_KV</code></li><li>**给 worker 绑定上键值对,【以及设置定时执行时间!】 注意：这里的名称一定是：<strong>SUBSCRIPTIONS_KV</strong> 否则后面需修改参数无法保存！</li></ol><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/a1633f053b20250707125553.webp" alt="a1633f053b20250707125553"></p><p>最后打开 worker 提供的域名地址,输入默认账号密码: admin password <strong>就可以访问，当然建议绑定到免费域名上，海内外都可以畅通访问！</strong></p><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/e1ae11177020250707130151.webp" alt="e1ae11177020250707130151"></p><p>提醒发送支持: 通过 Telegram,微信等发送及时提醒。</p><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/e2756ed88a20250707130426.webp" alt="e2756ed88a20250707130426"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="Telegram-配置："><a href="#Telegram-配置：" class="headerlink" title="Telegram 配置："></a>Telegram 配置：</h4><p>Bot Token 获取：@BotFather<br>Chat ID 获取：@VersaToolsBot</p><p>在 Telegram 新建一个频道，将频道里的任意信息转发到 @VersaToolsBot 机器人上就可以获取到 Chat ID，具体的配置过程看零度的教程演示！</p><hr><p>转载自<a href="https://www.freedidi.com/20033.html">零度解说</a><br><a href="https://www.youtube.com/watch?v=aZGlGjn4OHM">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 订阅管理与提醒系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理任何文件链接uniproxy</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BB%A3%E7%90%86%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5uniproxy/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E4%BB%A3%E7%90%86%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5uniproxy/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址：https-github-com-NyaMisty-cloudflare-workers-uniproxy"><a href="#项目地址：https-github-com-NyaMisty-cloudflare-workers-uniproxy" class="headerlink" title="项目地址：https://github.com/NyaMisty/cloudflare-workers-uniproxy"></a>项目地址：<a href="https://github.com/NyaMisty/cloudflare-workers-uniproxy">https://github.com/NyaMisty/cloudflare-workers-uniproxy</a></h2><h2 id="部署cloudflare-workers"><a href="#部署cloudflare-workers" class="headerlink" title="部署cloudflare workers"></a>部署cloudflare workers</h2><ul><li>复制index.js代码到cloudflare workers：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;</span><br><span class="line">    event.respondWith(handleRequest(event.request))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function parseURL(url) &#123;</span><br><span class="line">    let urlbody = url.substr(8);</span><br><span class="line">    urlbody = decodeURIComponent(urlbody.substr(urlbody.indexOf(&#x27;/&#x27;) + 1))</span><br><span class="line">    console.log(&quot;    Parsing: URLBody: &quot; + urlbody)</span><br><span class="line">    let split_header_url = urlbody.lastIndexOf(&quot;/&quot;, urlbody.search(&quot;://&quot;))</span><br><span class="line">    let real_url = urlbody.substr(split_header_url + 1)</span><br><span class="line">    if (!real_url) &#123;</span><br><span class="line">        throw &quot;Invalid real URL: &quot; + urlbody</span><br><span class="line">    &#125;</span><br><span class="line">    let headersbody = urlbody.substr(0, split_header_url)</span><br><span class="line">    console.log(&quot;    Parsing: Real URL: &quot; + real_url)</span><br><span class="line">    console.log(&quot;    Parsing: Headers JSON: &quot; + headersbody)</span><br><span class="line">    if (!headersbody) &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            url: real_url,</span><br><span class="line">            headers: &#123;&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!headersbody.startsWith(&quot;&#123;&quot;)) &#123;</span><br><span class="line">        headersbody = decodeURIComponent(headersbody)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!headersbody.startsWith(&quot;&#123;&quot;)) &#123;</span><br><span class="line">        throw &quot;Invalid URL headers string: &quot; + headersbody</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = JSON.parse(headersbody)</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        url: real_url,</span><br><span class="line">        headers: headers,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function handleRequest(request) &#123;</span><br><span class="line">    if (request.method == &quot;OPTIONS&quot;) &#123;</span><br><span class="line">        return new Response(&quot;&quot;, &#123;status:200, headers:&#123;</span><br><span class="line">            &quot;Access-Control-Allow-Credentials&quot;: true,</span><br><span class="line">            &quot;Access-Control-Allow-Headers&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Access-Control-Allow-Methods&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Access-Control-Max-Age&quot;: &quot;31536000&quot;,</span><br><span class="line">            &quot;X-Request-Type&quot;: &quot;CORS Preflight&quot;</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    let reqHeaders = new Headers(request.headers),</span><br><span class="line">        outBody, outStatus = 200, outCt = null, outHeaders = new Headers(&#123;</span><br><span class="line">            &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Access-Control-Allow-Methods&quot;: &quot;GET, POST, PUT, PATCH, DELETE, OPTIONS&quot;,</span><br><span class="line">            &quot;Access-Control-Allow-Headers&quot;: reqHeaders.get(&#x27;Access-Control-Allow-Headers&#x27;) || &quot;Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With, Token, x-access-token&quot;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        console.log(&quot;Got Raw ReqUrl: &quot; + request.url)</span><br><span class="line">        let t = parseURL(request.url)</span><br><span class="line">        let url = t.url</span><br><span class="line">        let headers = t.headers</span><br><span class="line">        console.log(&quot;Parsed URL body: &quot; + url)</span><br><span class="line">        console.log(&quot;Parsed URL headers: &quot; + JSON.stringify(headers))</span><br><span class="line"></span><br><span class="line">        if (url.length &lt; 3 || url.indexOf(&#x27;.&#x27;) == -1) &#123;</span><br><span class="line">            throw &quot;invalid URL input: &quot; + url;</span><br><span class="line">        &#125; else if (url == &quot;favicon.ico&quot; || url == &quot;robots.txt&quot;) &#123;</span><br><span class="line">            return Response.redirect(&#x27;https://workers.cloudflare.com&#x27;, 307)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (url.toLowerCase().indexOf(&quot;http&quot;) == -1) &#123;</span><br><span class="line">                url = &quot;http://&quot; + url;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            let fp = &#123;</span><br><span class="line">                method: request.method,</span><br><span class="line">                headers: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            let he = reqHeaders.entries();</span><br><span class="line">            for (let h of he) &#123;</span><br><span class="line">                if (![&#x27;content-length&#x27;, &#x27;content-type&#x27;].includes(h[0])) &#123;</span><br><span class="line">                    fp.headers[h[0]] = h[1];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (headers[&quot;_method&quot;] !== undefined) &#123;</span><br><span class="line">                fp.method = headers[&quot;_method&quot;].toUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">            fp.headers = Object.assign(&#123;&#125;, fp.headers, headers)</span><br><span class="line">            </span><br><span class="line">            if ([&quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;].indexOf(request.method) &gt;= 0) &#123;</span><br><span class="line">                const ct = (reqHeaders.get(&#x27;content-type&#x27;) || &quot;&quot;).toLowerCase();</span><br><span class="line">                if (ct.includes(&#x27;application/json&#x27;)) &#123;</span><br><span class="line">                    fp.body = JSON.stringify(await request.json());</span><br><span class="line">                &#125; else if (ct.includes(&#x27;application/text&#x27;) || ct.includes(&#x27;text/html&#x27;)) &#123;</span><br><span class="line">                    fp.body = await request.text();</span><br><span class="line">                &#125; else if (ct.includes(&#x27;form&#x27;)) &#123;</span><br><span class="line">                    fp.body = await request.formData();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    fp.body = await request.blob();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (headers[&quot;_body&quot;] !== undefined) &#123;</span><br><span class="line">                fp.body = headers[&quot;_body&quot;]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            let fr = (await fetch(url, fp));</span><br><span class="line">            outStatus = fr.status;</span><br><span class="line">            outCt = fr.headers.get(&#x27;content-type&#x27;);</span><br><span class="line">            outBody = fr.body;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        outStatus = 500</span><br><span class="line">        outCt = &quot;application/json&quot;;</span><br><span class="line">        outBody = JSON.stringify(&#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: JSON.stringify(err.stack) || err</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (outCt &amp;&amp; outCt != &quot;&quot;) &#123;</span><br><span class="line">        outHeaders.set(&quot;content-type&quot;, outCt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return new Response(outBody, &#123;</span><br><span class="line">        status: outStatus,</span><br><span class="line">        headers: outHeaders</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定域名即可</li></ul><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>在uniproxy的链接后面直接加上目标链接. 如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://你绑定的域名/链接</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加速链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署加密聊天</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%83%A8%E7%BD%B2%E5%8A%A0%E5%AF%86%E8%81%8A%E5%A4%A9/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%83%A8%E7%BD%B2%E5%8A%A0%E5%AF%86%E8%81%8A%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p><a href="https://github.com/shuaiplus/NodeCrypt">https://github.com/shuaiplus/NodeCrypt</a></p><h2 id="体验地址："><a href="#体验地址：" class="headerlink" title="体验地址："></a>体验地址：</h2><ol><li><a href="https://nodecrypt.elyar430.workers.dev/">https://nodecrypt.elyar430.workers.dev/</a></li><li><a href="https://crypt.works/">https://crypt.works/</a></li></ol><h2 id="部署方式："><a href="#部署方式：" class="headerlink" title="部署方式："></a>部署方式：</h2><h3 id="一、-docker镜像："><a href="#一、-docker镜像：" class="headerlink" title="一、 docker镜像："></a>一、 docker镜像：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nodecrypt -p 80:80 shua1/nodecrypt</span><br></pre></td></tr></table></figure><h3 id="二、-一键部署到-Cloudflare-Workers："><a href="#二、-一键部署到-Cloudflare-Workers：" class="headerlink" title="二、 一键部署到 Cloudflare Workers："></a>二、 一键部署到 Cloudflare Workers：</h3><p><a href="https://dash.cloudflare.com/d5c29c43122fb5bb4157ccb9e3d6cc79/workers-and-pages/create/deploy-to-workers?repository=https://github.com/shuaiplus/NodeCrypt"><img src="https://686e7a0.webp.li/CF%E5%9B%BE%E7%89%87.svg" alt="Deploy to Cloudflare"></a></p><p>此方式会基于主仓库创建新项目，后续主仓库更新不会自动同步。</p><h3 id="三、-自动同步-fork-并部署（推荐长期维护）"><a href="#三、-自动同步-fork-并部署（推荐长期维护）" class="headerlink" title="三、 自动同步 fork 并部署（推荐长期维护）"></a>三、 自动同步 fork 并部署（推荐长期维护）</h3><ol><li><p>先 fork 本项目到你自己的 GitHub 账号:<a href="%5Bhttps://github.com/shuaiplus/NodeCrypt%5D(https://github.com/shuaiplus/NodeCrypt)"><a href="https://github.com/shuaiplus/NodeCrypt">https://github.com/shuaiplus/NodeCrypt</a></a></p></li><li><p>打开 Cloudflare Workers 控制台，选择“从 GitHub 导入”，并选择你 fork 的仓库进行部署。</p></li></ol><p>本项目已内置自动同步 workflow，fork 后无需任何操作，主仓库的更新会自动同步到你的 fork 仓库，Cloudflare 也会自动重新部署，无需手动维护。</p><hr><p>转载自：<a href="https://www.nodeseek.com/post-353682-1">shuai</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密聊天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署抖音无水印视频下载服务</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%83%A8%E7%BD%B2%E6%8A%96%E9%9F%B3%E6%97%A0%E6%B0%B4%E5%8D%B0%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/%E9%83%A8%E7%BD%B2%E6%8A%96%E9%9F%B3%E6%97%A0%E6%B0%B4%E5%8D%B0%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="github：https-github-com-pwh-pwh-douyinVd"><a href="#github：https-github-com-pwh-pwh-douyinVd" class="headerlink" title="github：https://github.com/pwh-pwh/douyinVd"></a>github：<a href="https://github.com/pwh-pwh/douyinVd">https://github.com/pwh-pwh/douyinVd</a></h3><h2 id="cloudflare-workers部署："><a href="#cloudflare-workers部署：" class="headerlink" title="cloudflare workers部署："></a>cloudflare workers部署：</h2><ul><li>安装 <a href="https://github.com/skymethod/denoflare"><code>denoflare</code></a> CLI 工具。</li><li>在项目根目录配置 <code>.denoflare</code> 文件。</li><li>执行部署命令：</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denoflare push cfworker.ts</span><br></pre></td></tr></table></figure><ul><li>部署后到 worker 设置开启访问即可</li><li>参考文档：<a href="https://docs.deno.com/examples/cloudflare_workers_tutorial/">Cloudflare Workers 教程</a></li><li>如果怕麻烦或者出现其他错误，可以直接使用 <a href="https://github.com/pwh-pwh/douyinVd/blob/main/cfbuild.js">cfbuild.js</a> 文件，这个是编译后的文件，可以直接部署 cf worker</li></ul><h2 id="注意：cloudflare-workers部署只需复制cfbuild-js-文件到cloudflare-workers中，绑定域名即可"><a href="#注意：cloudflare-workers部署只需复制cfbuild-js-文件到cloudflare-workers中，绑定域名即可" class="headerlink" title="注意：cloudflare workers部署只需复制cfbuild.js 文件到cloudflare workers中，绑定域名即可"></a>注意：cloudflare workers部署只需复制<a href="https://github.com/pwh-pwh/douyinVd/blob/main/cfbuild.js">cfbuild.js</a> 文件到cloudflare workers中，绑定域名即可</h2><p><code>data</code>: 启用 JSON 数据返回，请求链接如下 <a href="https://yourdomain/?data&url=https://v.douyin.com/xxxx">https://yourdomain?data&amp;url=https://v.douyin.com/xxxx</a>，即：<br><a href="https://yourdomain/?data&url=%E6%8A%96%E9%9F%B3%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5">https://yourdomain?data&amp;url=抖音视频分享链接</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抖音视频下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uptime-Status网站监测项目部署</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/Uptime-Status%E7%BD%91%E7%AB%99%E7%9B%91%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/Uptime-Status%E7%BD%91%E7%AB%99%E7%9B%91%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p><a href="https://github.com/git80123/Uptime-Status">https://github.com/git80123/Uptime-Status</a></p><h2 id="部署准备："><a href="#部署准备：" class="headerlink" title="部署准备："></a>部署准备：</h2><h3 id="获取-UptimeRobot-API-Key"><a href="#获取-UptimeRobot-API-Key" class="headerlink" title="获取 UptimeRobot API Key"></a>获取 <code>UptimeRobot API Key</code></h3><ul><li>注册&#x2F;登录<a href="https://uptimerobot.com/">UptimeRobot</a></li><li>进入<a href="https://dashboard.uptimerobot.com/integrations">Integrations &amp; API</a></li><li>下拉到最底部在 <code>Main API keys</code> 部分创建 <code>Read-Only API Key</code></li><li>复制生成的 <code>API Key</code></li></ul><h2 id="vercel部署"><a href="#vercel部署" class="headerlink" title="vercel部署"></a>vercel部署</h2><ul><li>点击上方黑色 <code>&quot;Deploy&quot;</code> 按钮</li><li>连接到<code>GitHub</code>，选择项目</li><li>填写项目名称，点击<code>Create</code></li><li>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></li></ul><h2 id="在vercel中添加环境变量："><a href="#在vercel中添加环境变量：" class="headerlink" title="在vercel中添加环境变量："></a>在vercel中添加环境变量：</h2><p><code>UptimeRobot API Key</code><br><code>VITE_UPTIMEROBOT_API_KEY</code> &#x3D; <code>&quot;ur2290572-af4663a4e3f83be26119abbe&quot;</code></p><p><code>UptimeRobot API URL</code><br>除腾讯云 <code>EdgeOne Pages</code> 、<code>vercel</code> 、<code>cloudflare pages</code> 外<br>其它部署方式需要自行搭建 <code>API</code> 代理<br>代理地址 <a href="https://api.uptimerobot.com/v2/getMonitors">https://api.uptimerobot.com/v2/getMonitors</a><br><code>VITE_UPTIMEROBOT_API_URL</code> &#x3D; <code>&quot;/api/status&quot;</code></p><p>站点名称<br><code>VITE_APP_TITLE</code> &#x3D; “梦爱吃鱼”</p><h2 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h2><p>需已托管到CF的域名，</p><h2 id="添加监控网站"><a href="#添加监控网站" class="headerlink" title="添加监控网站"></a>添加监控网站</h2><p>登录<a href="https://dashboard.uptimerobot.com/monitors">https://dashboard.uptimerobot.com/monitors</a>添加自己已部署好的站点即可</p><hr><h2 id="其他部署方式："><a href="#其他部署方式：" class="headerlink" title="其他部署方式："></a>其他部署方式：</h2><p><strong>环境要求</strong><br>Node.js &gt;&#x3D; 16.16.0<br>NPM &gt;&#x3D; 8.15.0 或 PNPM &gt;&#x3D; 8.0.0</p><ol><li><h3 id="腾讯云-EdgeOne-Pages"><a href="#腾讯云-EdgeOne-Pages" class="headerlink" title="腾讯云 EdgeOne Pages"></a>腾讯云 EdgeOne Pages</h3></li></ol><p>点击上方蓝色 <code>&quot;Deploy&quot;</code> 按钮<br>连接到<code>GitHub</code>，选择项目<br>框架预设选择<code>Vue</code>，点击开始部署<br>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></p><ol start="2"><li><h3 id="Cloudflare-Pages"><a href="#Cloudflare-Pages" class="headerlink" title="Cloudflare Pages"></a>Cloudflare Pages</h3></li></ol><p>点击上方橙色 <code>&quot;Deploy&quot;</code> 按钮<br>找到计算(<code>worker</code>) 部分<br>点击创建，选择<code>Pages</code>，连接到<code>GitHub</code>，选择项目，点击开始创建<br>框架预设选择<code>Vue</code>，点击保持并部署<br>使用默认配置 <code>VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</code></p><ol start="3"><li><h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3></li></ol><p>自行搭建 API 代理<br>在 .env 文件中设置 VITE_UPTIMEROBOT_API_URL 为你的 API 代理地址</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3></li></ol><p><a href="https://github.com/JLinmr/uptime-status.git">https://github.com/JLinmr/uptime-status.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/JLinmr/uptime-status.git</span><br><span class="line">cd uptime-status</span><br></pre></td></tr></table></figure><ol start="2"><li><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br><span class="line"># 或</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3></li></ol><p>在 <code>.env</code> 文件中修改以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># UptimeRobot API Key</span><br><span class="line">VITE_UPTIMEROBOT_API_KEY = &quot;ur2290572-af4663a4e3f83be26119abbe&quot;</span><br><span class="line"></span><br><span class="line"># UptimeRobot API URL </span><br><span class="line"># 除腾讯云 EdgeOne Pages 、vercel 、cloudflare pages 外 </span><br><span class="line">## 其它部署方式需要自行搭建 API 代理 </span><br><span class="line">## 代理地址 https://api.uptimerobot.com/v2/getMonitors</span><br><span class="line">VITE_UPTIMEROBOT_API_URL = &quot;/api/status&quot;</span><br><span class="line"></span><br><span class="line"># 站点名称</span><br><span class="line">VITE_APP_TITLE = &quot;梦爱吃鱼&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pnpm dev</span><br><span class="line"># 或</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># 开发环境需要将 VITE_UPTIMEROBOT_API_URL 设置为 &quot;https://api.uptimerobot.com/v2/getMonitors&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li><h3 id="构建部署"><a href="#构建部署" class="headerlink" title="构建部署"></a>构建部署</h3></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm build</span><br><span class="line"># 或</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>构建的文件在 <code>dist</code> 目录下，将 <code>dist</code> 目录部署到服务器即可。</p><hr><p>感谢<a href="https://blog.bsgun.cn/posts/17ce10fc/#%E5%89%8D%E8%A8%80">梦爱吃鱼</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站监测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><ul><li>markdown 的标题呢有两种格式</li></ul><ol><li>使用 &#x3D; 和 - 标记一级和二级标题</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我展示的是一级标题  </span><br><span class="line">================</span><br><span class="line">我展示的是二级标题  </span><br><span class="line">----------------</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 # 号标记标题</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="二、段落格式"><a href="#二、段落格式" class="headerlink" title="二、段落格式"></a>二、段落格式</h2><ol><li>换行</li></ol><ul><li><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车</p></li><li><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落</p></li></ul><ol start="2"><li>字体样式</li></ol><ul><li>Markdown 可以使用以下几种字体：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><ol start="3"><li>分隔线</li></ol><ul><li>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><ol start="4"><li>删除线</li></ol><ul><li>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一段正确的文本</span><br><span class="line">~~这是一段错误的文本~~</span><br></pre></td></tr></table></figure><ol start="5"><li>下划线</li></ol><ul><li>下划线可以通过 HTML 的 <u> 标签来实现：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不带下划线的文本</span><br><span class="line">&lt;u&gt;带下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>脚注</li></ol><ul><li>脚注是对文本的补充说明，Markdown 脚注的格式如 [^要注明的文本]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^<span class="variable constant_">GSW</span>]。</span><br><span class="line">[^<span class="variable constant_">GSW</span>]: <span class="title class_">Golden</span> <span class="title class_">State</span> <span class="title class_">Warriors</span></span><br></pre></td></tr></table></figure><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><ul><li><p>Markdown 支持有序列表和无序列表。</p></li><li><p>无序列表使用星号 (*)、加号 (+) 或是减号 (-) 作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><ul><li>有序列表使用数字并加上. 号来表示，如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项</span><br><span class="line"><span class="number">2.</span> 第二项</span><br><span class="line"><span class="number">3.</span> 第三项</span><br></pre></td></tr></table></figure><ul><li>列表嵌套</li></ul><p>列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line"><span class="number">2.</span> 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><h2 id="四、区块"><a href="#四、区块" class="headerlink" title="四、区块"></a>四、区块</h2><ul><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; <span class="title class_">Markdown</span></span><br><span class="line">&gt; 学无止境，要将学习贯穿一辈子</span><br></pre></td></tr></table></figure><ul><li>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><ul><li>区块中使用列表实例如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; <span class="number">1.</span> 第一项</span><br><span class="line">&gt; <span class="number">2.</span> 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br></pre></td></tr></table></figure><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><ul><li><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</p></li><li><p>列表中使用区块实例如下：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; <span class="title class_">Mardown</span></span><br><span class="line">    &gt; 学的不仅是技术更是梦想</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h2><ul><li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96; ），例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`print()`</span>具有输出的功能</span><br></pre></td></tr></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><ul><li><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p></li><li><p>实例如下：</p><p>  if a &#x3D;&#x3D; 1:<br>  print(“a is 1”)<br>  else:<br>  print(“a is not 1”)</p></li><li><p>你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if a == 1:</span><br><span class="line">    print(&quot;a is 1&quot;)</span><br><span class="line">    else:</span><br><span class="line">    print(&quot;a is not 1&quot;)</span><br></pre></td></tr></table></figure><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><ul><li>链接使用方法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[我的博客](<span class="attr">https</span>:<span class="comment">//jiumu.xiaolin.nyc.mn/)</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;https://jiumu.xiaolin.nyc.mn/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>高级链接</strong></p><ul><li>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [<span class="title class_">Google</span>][<span class="number">1</span>]</span><br><span class="line">这个链接用 blog 作为网址变量 [<span class="title class_">Blog</span>][blog]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [<span class="number">1</span>]: <span class="attr">http</span>:<span class="comment">//www.google.com/</span></span><br><span class="line">  [blog]: <span class="attr">http</span>:<span class="comment">//zy111x.github.io/</span></span><br></pre></td></tr></table></figure><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><ul><li>图片的语法格式如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 <span class="string">&quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>开头一个感叹号！</li><li>接着一个方括号，里面放上图片的替代文字接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并</li><li>加上选择性的 ‘title’ 属性的文字。</li></ul><p>当然，你也可以像网址那样对图片网址使用变量:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [<span class="title class_">Blog</span>][<span class="number">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;https://686e7a0.webp.li/%E8%BA%BA%E5%BA%8A%E4%B8%8A.png&quot;</span> width=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure><img src="https://686e7a0.webp.li/%E8%BA%BA%E5%BA%8A%E4%B8%8A.png" width="50%"><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><ul><li>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li></ul><p>语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p><strong>对齐方式:</strong></p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h2 id="九、高级技巧"><a href="#九、高级技巧" class="headerlink" title="九、高级技巧"></a>九、高级技巧</h2><ul><li><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p></li><li><p>目前支持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br> 等 ，如：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;<span class="title class_">Ctrl</span>&lt;<span class="regexp">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p><strong>转义</strong></p><ul><li>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure><ul><li>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line"><span class="string">`   反引号</span></span><br><span class="line"><span class="string">*   星号</span></span><br><span class="line"><span class="string">_   下划线</span></span><br><span class="line"><span class="string">&#123;&#125;  花括号</span></span><br><span class="line"><span class="string">[]  方括号</span></span><br><span class="line"><span class="string">()  小括号</span></span><br><span class="line"><span class="string">#   井字号</span></span><br><span class="line"><span class="string">+   加号</span></span><br><span class="line"><span class="string">-   减号</span></span><br><span class="line"><span class="string">.   英文句点</span></span><br><span class="line"><span class="string">!   感叹号</span></span><br></pre></td></tr></table></figure><p><strong>公式</strong></p><ul><li><p>Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。</p></li><li><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解</p></li><li><p>KaTeX 支持那些符号和函数。</p></li></ul><p><strong>默认下的分隔符：</strong></p><ul><li>$…$ 或者 (…) 中的数学表达式将会在行内显示。</li><li>$$…$$ 或者 […] 或者 ```math 中的数学表达式将会在块内显示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;<span class="title class_">Bmatrix</span>&#125;</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;<span class="title class_">Bmatrix</span>&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;<span class="variable constant_">CD</span>&#125;</span><br><span class="line">   A @&gt;a&gt;&gt; B \\</span><br><span class="line">@<span class="title class_">VbVV</span> @<span class="title class_">AAcA</span> \\</span><br><span class="line">   C @= D</span><br><span class="line">\end&#123;<span class="variable constant_">CD</span>&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>typora 画流程图、时序图 (顺序图)、甘特图</strong></p><p>(复制以下代码使用 typora 的源码模式粘贴到编辑器中查看效果)</p><p>以下几个实例效果图如下：</p><ol><li>横向流程图源码格式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph <span class="variable constant_">LR</span></span><br><span class="line">A[方形] --&gt;<span class="title function_">B</span>(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt;|a=<span class="number">1</span>| D[结果<span class="number">1</span>]</span><br><span class="line">C --&gt;|a=<span class="number">2</span>| E[结果<span class="number">2</span>]</span><br><span class="line">F[横向流程图]</span><br></pre></td></tr></table></figure><ol start="2"><li>竖向流程图源码格式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph <span class="variable constant_">TD</span></span><br><span class="line">A[方形] --&gt; <span class="title function_">B</span>(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt; |a=<span class="number">1</span>| D[结果<span class="number">1</span>]</span><br><span class="line">C --&gt; |a=<span class="number">2</span>| E[结果<span class="number">2</span>]</span><br><span class="line">F[竖向流程图]</span><br></pre></td></tr></table></figure><ol start="3"><li>标准流程图源码格式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;<span class="attr">start</span>: 开始框</span><br><span class="line">op=&gt;<span class="attr">operation</span>: 处理框</span><br><span class="line">cond=&gt;<span class="attr">condition</span>: 判断框(是或否?)</span><br><span class="line">sub1=&gt;<span class="attr">subroutine</span>: 子流程</span><br><span class="line">io=&gt;<span class="attr">inputoutput</span>: 输入输出框</span><br><span class="line">e=&gt;<span class="attr">end</span>: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_">cond</span>(yes)-&gt;io-&gt;e</span><br><span class="line"><span class="title function_">cond</span>(no)-&gt;<span class="title function_">sub1</span>(right)-&gt;op</span><br></pre></td></tr></table></figure><ol start="4"><li>标准流程图源码格式（横向）：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;<span class="attr">start</span>: 开始框</span><br><span class="line">op=&gt;<span class="attr">operation</span>: 处理框</span><br><span class="line">cond=&gt;<span class="attr">condition</span>: 判断框(是或否?)</span><br><span class="line">sub1=&gt;<span class="attr">subroutine</span>: 子流程</span><br><span class="line">io=&gt;<span class="attr">inputoutput</span>: 输入输出框</span><br><span class="line">e=&gt;<span class="attr">end</span>: 结束框</span><br><span class="line"><span class="title function_">st</span>(right)-&gt;<span class="title function_">op</span>(right)-&gt;cond</span><br><span class="line"><span class="title function_">cond</span>(yes)-&gt;<span class="title function_">io</span>(bottom)-&gt;e</span><br><span class="line"><span class="title function_">cond</span>(no)-&gt;<span class="title function_">sub1</span>(right)-&gt;op</span><br></pre></td></tr></table></figure><ol start="5"><li>UML 时序图源码样例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象<span class="attr">B</span>: 对象B你好吗?（请求）</span><br><span class="line"><span class="title class_">Note</span> right <span class="keyword">of</span> 对象<span class="attr">B</span>: 对象B的描述</span><br><span class="line"><span class="title class_">Note</span> left <span class="keyword">of</span> 对象<span class="attr">A</span>: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象<span class="attr">A</span>: 我很好(响应)</span><br><span class="line">对象A-&gt;对象<span class="attr">B</span>: 你真的好吗？</span><br></pre></td></tr></table></figure><ol start="6"><li>UML 时序图源码复杂样例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Title</span>: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象<span class="attr">B</span>: 对象B你好吗?（请求）</span><br><span class="line"><span class="title class_">Note</span> right <span class="keyword">of</span> 对象<span class="attr">B</span>: 对象B的描述</span><br><span class="line"><span class="title class_">Note</span> left <span class="keyword">of</span> 对象<span class="attr">A</span>: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象<span class="attr">A</span>: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象<span class="attr">A</span>: 对象B找我了</span><br><span class="line">对象A-&gt;对象<span class="attr">B</span>: 你真的好吗？</span><br><span class="line"><span class="title class_">Note</span> over 小三,对象<span class="attr">B</span>: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line"><span class="title class_">Note</span> right <span class="keyword">of</span> <span class="attr">C</span>: 没人陪我玩</span><br></pre></td></tr></table></figure><ol start="7"><li>UML 标准时序图样例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">sequenceDiagram</span><br><span class="line">participant 张三</span><br><span class="line">participant 李四</span><br><span class="line">张三-&gt;王五: 王五你好吗？</span><br><span class="line">loop 健康检查</span><br><span class="line">    王五-&gt;王五: 与疾病战斗</span><br><span class="line">end</span><br><span class="line"><span class="title class_">Note</span> right <span class="keyword">of</span> 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">李四--&gt;&gt;张三: 很好!</span><br><span class="line">王五-&gt;李四: 你怎么样?</span><br><span class="line">李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><ol start="8"><li>甘特图样例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">    gantt</span><br><span class="line">    dateFormat  <span class="variable constant_">YYYY</span>-<span class="variable constant_">MM</span>-<span class="variable constant_">DD</span></span><br><span class="line">    title 软件开发甘特图</span><br><span class="line">    section 设计</span><br><span class="line">    需求                      :done,    des1, <span class="number">2014</span>-<span class="number">01</span>-<span class="number">06</span>,<span class="number">2014</span>-<span class="number">01</span>-<span class="number">08</span></span><br><span class="line">    原型                      :active,  des2, <span class="number">2014</span>-<span class="number">01</span>-<span class="number">09</span>, 3d</span><br><span class="line">    <span class="variable constant_">UI</span>设计                     :         des3, after des2, 5d</span><br><span class="line">未来任务                     :         des4, after des3, 5d</span><br><span class="line">    section 开发</span><br><span class="line">    学习准备理解需求                      :crit, done, <span class="number">2014</span>-<span class="number">01</span>-<span class="number">06</span>,24h</span><br><span class="line">    设计框架                             :crit, done, after des2, 2d</span><br><span class="line">    开发                                 :crit, active, 3d</span><br><span class="line">    未来任务                              :crit, 5d</span><br><span class="line">    耍                                   :2d</span><br><span class="line">    section 测试</span><br><span class="line">    功能测试                              :active, a1, after des3, 3d</span><br><span class="line">    压力测试                               :after a1  , 20h</span><br><span class="line">    测试报告                               : 48h</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github自动同步项目</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="PS-建议使用第二种方法"><a href="#PS-建议使用第二种方法" class="headerlink" title="PS:建议使用第二种方法"></a>PS:建议使用第二种方法</h2><p>首先打开<strong>Actions</strong>页面 新建<br><strong>workflow</strong><br>（第一种方法 ）<br>首先打开你Fork的项目，打开<strong>Actions</strong>页面,点击<strong>new workflow</strong>，选择<strong>set up a workflow yourself</strong>进入编辑页面。</p><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><p>文件取名为<code>sync.yml</code>，然后输入以下代码:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Upstream</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">    <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span></span><br><span class="line">    <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">    <span class="attr">sync_with_upstream:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">with</span> <span class="string">Upstream</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.fork</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">target</span> <span class="string">repo</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">Upstream</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">aormsby/Fork-Sync-With-Upstream-action@v3.4</span></span><br><span class="line">              <span class="attr">with:</span></span><br><span class="line">                  <span class="attr">target_repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">                  <span class="attr">upstream_sync_repo:</span> <span class="string">shaoyouvip/uptime</span></span><br><span class="line">                  <span class="attr">upstream_sync_branch:</span> <span class="string">main</span></span><br><span class="line">                  <span class="attr">target_sync_branch:</span> <span class="string">main</span></span><br><span class="line">                  <span class="attr">test_mode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">for</span> <span class="string">Failure</span></span><br><span class="line">              <span class="attr">if:</span> <span class="string">failure()</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  echo &quot;[Error] Due to a change in the workflow file of the upstream repository, GitHub has automatically suspended the scheduled automatic update. You need to manually sync your fork.&quot;</span></span><br><span class="line"><span class="string">                  exit 1</span></span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ol><li>定时任务执行间隔<br>修改cron项，这里是0 0 * * *，代表每天0点执行一次</li><li>要同步的仓库路径<br>修改upstream_sync_repo项，这里要填你fork的仓库路径，在你fork项目的的名字下方能看到</li><li>同步分支名称（ 超级无敌要注意 ）<br>修改upstream_sync_branch和target_sync_branch项，填写你要同步分支的名称，例如我填的main，一般来说fork的分支名称都一样，但这只是一般情况，也有的老项目默认的分支不是main，在Sync Upstream步骤中请一定确保你上游项目的分支路径。</li></ol><p>提交保持文件<br>填写完成后点右上角<strong>commit changes</strong>，然后确认。</p><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>回到<strong>Actions</strong>页面，点击你刚刚创建的<strong>workflow</strong>，点击<strong>Run workflow</strong></p><h2 id="运行成功"><a href="#运行成功" class="headerlink" title="运行成功"></a>运行成功</h2><p>刷新页面可以看到效果</p><h2 id="使用-Pull-自动同步（第二种方法-）"><a href="#使用-Pull-自动同步（第二种方法-）" class="headerlink" title="使用 Pull 自动同步（第二种方法 ）"></a>使用 Pull 自动同步（第二种方法 ）</h2><p><code>设置 Pull 帮助我们和上游保持一致同步</code></p><ol><li>打开 <a href="https://github.com/apps/pull">https://github.com/apps/pull</a> 点击右上角安装，选择你的账户。</li><li>选择你要同步的项目，选择储存库不要选所有储存库，有些项目并不是最新的就是好的。你自己选择。</li><li>下次如要添加新的项目同步可以在你的GitHub 账户设置</li><li>找到 <strong>Applications</strong>应用 <strong>Configure</strong>配置你的 新项目</li><li>选择你要同步的项目就可以了，完事结束！</li></ol><hr><p>转载自<a href="https://blog.zrf.me/p/64/">周润发</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github自动同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github新闻推送机器人</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E6%96%B0%E9%97%BB%E6%8E%A8%E9%80%81%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E6%96%B0%E9%97%BB%E6%8E%A8%E9%80%81%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>github项目地址：</p><p><a href="https://github.com/git80123/TrendRadar">https://github.com/git80123/TrendRadar</a></p><h2 id="教程："><a href="#教程：" class="headerlink" title="教程："></a>教程：</h2><ol><li><p>Fork <a href="https://github.com/git80123/TrendRadar">本项目</a>到你的 GitHub 账户</p></li><li><p>设置 GitHub Secrets（选择你需要的平台）:<br>在你 Fork 后的仓库中，进入 Settings &gt; Secrets and variables &gt; Actions &gt; New repository secret，然后根据需要配置以下任一或多个通知平台：</p></li></ol><p>可以同时配置多个平台，系统会向所有配置的平台发送通知。</p><p>机器人获取步骤与添加机密变量在github上查看</p><ol start="3"><li>配置关键词和设置:</li></ol><ul><li>关键词配置: 修改 config&#x2F;frequency_words.txt 文件，添加你关心的关键词</li><li>运行模式配置: 在 config&#x2F;config.yaml 中修改 report.mode 设置：<table><thead><tr><th>模式</th><th>推送时机</th><th>显示内容</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>当日汇总模式</strong><br/><code>daily</code></td><td>按时推送</td><td>当日所有匹配新闻<br/>+ 新增新闻区域</td><td>日报总结<br/>全面了解当日热点趋势</td></tr><tr><td><strong>当前榜单模式</strong><br/><code>current</code></td><td>按时推送</td><td>当前榜单匹配新闻<br/>+ 新增新闻区域</td><td>实时热点追踪<br/>了解当前最火的内容</td></tr><tr><td><strong>增量监控模式</strong><br/><code>incremental</code></td><td>有新增才推送</td><td>新出现的匹配频率词新闻</td><td>避免重复信息干扰<br/>高频监控场景</td></tr></tbody></table></li></ul><ol start="4"><li>自动运行:</li></ol><ul><li>项目已包含.github&#x2F;workflows&#x2F;crawler.yml配置文件，默认每 30 分钟自动运行一次</li><li>你也可以在 GitHub 仓库的 Actions 页面手动触发运行</li></ul><ol start="5"><li>查看结果:</li></ol><ul><li>运行结果将自动保存在仓库的output目录中</li><li>同时通过配置的机器人发送通知到你的群组</li></ul><h3 id="🔧-自定义监控平台"><a href="#🔧-自定义监控平台" class="headerlink" title="🔧 自定义监控平台"></a>🔧 自定义监控平台</h3><p>本项目的资讯数据来源于 <a href="https://github.com/ourongxing/newsnow">newsnow</a> ，你可以点击<a href="https://newsnow.busiyi.world/">网站</a>，点击[更多]，查看是否有你想要的平台。</p><p>具体添加可访问 <a href="https://github.com/ourongxing/newsnow/tree/main/server/sources">项目源代码</a>，根据里面的文件名，在 config&#x2F;config.yaml 文件中修改 platforms 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">platforms:</span><br><span class="line">  - id: &quot;toutiao&quot;</span><br><span class="line">    name: &quot;今日头条&quot;</span><br><span class="line">  - id: &quot;baidu&quot;  </span><br><span class="line">    name: &quot;百度热搜&quot;</span><br><span class="line">  - id: &quot;wallstreetcn-hot&quot;</span><br><span class="line">    name: &quot;华尔街见闻&quot;</span><br><span class="line">  # 添加更多平台...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tg新闻推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare免费图床教程</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/cloudflare%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/cloudflare%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-fork-GitHub项目"><a href="#1-fork-GitHub项目" class="headerlink" title="1. fork GitHub项目"></a>1. fork GitHub项目</h2><h3 id="【点击前往】"><a href="#【点击前往】" class="headerlink" title="【点击前往】"></a><a href="https://github.com/MarSeventh/CloudFlare-ImgBed">【点击前往】</a></h3><h2 id="2-登录cloudflare账号"><a href="#2-登录cloudflare账号" class="headerlink" title="2. 登录cloudflare账号"></a>2. 登录cloudflare账号</h2><ul><li>在workers和pages中选择pages</li><li>选择刚刚fork的项目，开始设置</li><li>项目名称自己随意命名</li><li>构建命令：<code>npm install</code></li><li>其他保持默认即可，点击保存并部署</li></ul><h2 id="3-点击存储和数据库，创建一个KV空间，名字：img-url"><a href="#3-点击存储和数据库，创建一个KV空间，名字：img-url" class="headerlink" title="3. 点击存储和数据库，创建一个KV空间，名字：img_url"></a>3. 点击存储和数据库，创建一个KV空间，名字：<code>img_url</code></h2><h2 id="4-点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed-位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可"><a href="#4-点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed-位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可" class="headerlink" title="4. 点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed,位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可"></a>4. 点击R2对象存储，创建一个存储桶，名称可以随意命名，例：<code>imgbed</code>,位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可</h2><h2 id="5-回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶："><a href="#5-回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶：" class="headerlink" title="5. 回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶："></a>5. 回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶：</h2><p>KV空间变量名称：<code>img_url</code><br>R2存储桶变量名称：<code>img_r2</code><br>值就是刚刚创建好的KV空间名称和R2存储桶名称</p><h2 id="6-绑定域名"><a href="#6-绑定域名" class="headerlink" title="6. 绑定域名"></a>6. 绑定域名</h2><h2 id="7-点击上方的部署，重试部署即可访问域名"><a href="#7-点击上方的部署，重试部署即可访问域名" class="headerlink" title="7. 点击上方的部署，重试部署即可访问域名"></a>7. 点击上方的部署，重试部署即可访问域名</h2><p>登录绑定好的域名，点击右下方的设置图标，再点击左上角的三条横杆，选择系统设置</p><h3 id="1-上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https-xxx-xxx-com），注意后面不要有-，点击保存设置即可"><a href="#1-上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https-xxx-xxx-com），注意后面不要有-，点击保存设置即可" class="headerlink" title="1. 上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https://xxx.xxx.com），注意后面不要有 &#x2F;，点击保存设置即可"></a>1. 上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：<a href="https://xxx.xxx.com),注意后面不要有/">https://xxx.xxx.com），注意后面不要有</a> <strong>&#x2F;</strong>，点击保存设置即可</h3><h3 id="2-安全设置："><a href="#2-安全设置：" class="headerlink" title="2. 安全设置："></a>2. 安全设置：</h3><ul><li>上传密码就是在上传图片的时候需要密码才可以上传图片（R2存储空间每个月10g，空间有限，一般情况下个人够用，所以尽量还是设置一个上传密码，不设置密码，所有人都可以上传）</li><li>设置用户名和密码，其他保持不变，保存即可</li></ul><h3 id="3-网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）："><a href="#3-网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）：" class="headerlink" title="3. 网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）："></a>3. 网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）：</h3><ul><li>默认URL前缀输入自己的域名，要加https（例：<a href="https://xxx.xxx.com/%EF%BC%89%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%90%8E%E9%9D%A2%E5%8C%85%E5%90%AB">https://xxx.xxx.com/），注意后面包含</a> <strong>&#x2F;</strong> ,其他根据各自的情况修改，保存即可</li></ul><hr><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><h3 id="1-本地上传"><a href="#1-本地上传" class="headerlink" title="1. 本地上传"></a>1. 本地上传</h3><p>点击相机图标，选择要上传的图片，可以多选，第一次上传会提示失败，因为还没有输入上传密码，输入密码后重新上传即可<br>右上角可以输入上传目录，先输入自己想要的上传的目录（自动创建），然后上传图片就会存到该目录</p><h3 id="2-URL上传"><a href="#2-URL上传" class="headerlink" title="2. URL上传"></a>2. URL上传</h3><p>点击右上角的文件夹图标，即切换上传方式，在输入框中输入图片或视频的URL链接，点击上传即可（即输入图片链接，自动下载到文件夹中）<br>外链上传：存入别人的图片链接，无需下载图片，当使用该图片时，用的不是自己的链接，而是原作者的链接</p><hr><p><a href="https://www.youtube.com/watch?v=etxnI8qGVBg">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare搭建你的AI图片生成站,免费Flux.1文生图</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/workerAIflux1%E6%96%87%E7%94%9F%E5%9B%BE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/workerAIflux1%E6%96%87%E7%94%9F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="github项目："><a href="#github项目：" class="headerlink" title="github项目："></a>github项目：</h2><p><a href="https://github.com/aigem/cf-flux-remix">https://github.com/aigem/cf-flux-remix</a></p><h2 id="cloudflare部署："><a href="#cloudflare部署：" class="headerlink" title="cloudflare部署："></a>cloudflare部署：</h2><p>1、新建一个worker<br>名称为 free-flux （与wrangler.toml文件中的名称一致，或自定义名称，在github的wrangler.toml文件中更改名称）. <strong>注意</strong>此名称必须与Github中的Wrangler.toml文件中的名称一致。</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788160170-%E5%88%9B%E5%BB%BAworkers.png"></p><p>2、worker后台设置中绑定Github仓库，绑定Fork的本仓库</p><p>3、填入构建命令等<br>构建命令（可选）： pnpm install<br>部署命令： pnpm run deploy</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788205368-%E8%BF%9E%E6%8E%A5git.png"></p><p>4、触发CF Workers中部署<br>随便改动一下仓库readme文件，提交后自动触发部署</p><p>5、部署完成<br>部署完成后打开相应网站来使用，API使用看下面的说明<br>记得在worker后台设置环境变量，替换自己的CF账号ID及API令牌<br>API令牌要有Workers AI 的读取及编辑权限。</p><h2 id="cloudflare-ID和API获取"><a href="#cloudflare-ID和API获取" class="headerlink" title="cloudflare ID和API获取"></a>cloudflare ID和API获取</h2><p>cloudflareID：</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788812878-%E8%B4%A6%E6%88%B7ID%E8%8E%B7%E5%8F%96.png"></p><p>API获取：</p><p>1.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788882130-%E7%AE%A1%E7%90%86API.png"></p><p>2.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788947489-%E5%88%9B%E5%BB%BA%E4%BB%A4%E7%89%8C.png"></p><p>3.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753789012209-workersAI%E6%A8%A1%E6%9D%BF.png"></p><p>4.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753789172809-%E9%80%89%E6%8B%A9%E6%89%80%E6%9C%89%E8%B4%A6%E6%88%B7.png"></p><ol start="5"><li>创建令牌，即可看到api令牌，与账户ID一起复制到<br><code>CF_ACCOUNT_LIST</code>变量中即可</li></ol><hr><p><a href="https://www.bilibili.com/video/BV1Wz2NYyEmW/?vd_source=b081dd3783684566bfe9c7b9f0a29d79">视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文生图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/tg%E5%9B%BE%E5%BA%8A/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/tg%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>由于原有的 Telegraph API 接口被官方关闭，需要将上传渠道切换至 Telegram Channel，请按照文档中的部署要求设置 <code>TG_Bot_Token</code> 和 <code>TG_Chat_ID</code>，否则将无法正常使用上传功能。</p><h2 id="如何获取-Telegram-的-Bot-Token-和-Chat-ID"><a href="#如何获取-Telegram-的-Bot-Token-和-Chat-ID" class="headerlink" title="如何获取 Telegram 的 Bot_Token 和 Chat_ID"></a>如何获取 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90ZWxlZ3JhbS5vcmcv">Telegram</a> 的 <code>Bot_Token</code> 和 <code>Chat_ID</code></h2><p>如果您还没有 Telegram 账户，请先创建一个。接着，按照以下步骤操作以获取 <code>BOT_TOKEN</code> 和 <code>CHAT_ID</code>：</p><ol><li><strong>获取 <code>Bot_Token</code></strong><ul><li>在 Telegram 中，向 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0JvdEZhdGhlcg==">@BotFather</a> 发送命令 <code>/newbot</code>，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个 <code>BOT_TOKEN</code>，用于与 Telegram API 进行交互。</li></ul></li></ol><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142849-.png" alt="202409071744569"></p><ol start="2"><li><strong>设置机器人为频道管理员</strong><ul><li>创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。</li></ul></li></ol><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142850-.png" alt="202409071758534"></p><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142851-.png" alt="202409071758796"></p><ol start="3"><li><p><strong>获取 <code>Chat_ID</code></strong></p><ul><li>通过 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL1ZlcnNhVG9vbHNCb3Q=">@VersaToolsBot</a> 获取您的频道 ID。向该机器人发送消息，按照指示操作，最后您将得到 <code>CHAT_ID</code>（即频道的 ID）。</li><li>或者通过 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0dldFRoZWlySURCb3Q=">@GetTheirIDBot</a> 获取您的频道 ID。向该机器人发送消息，按照指示操作，最后您将得到 <code>CHAT_ID</code>（即频道的 ID）。</li></ul><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142851-1-1.png" alt="202409071751619"></p></li></ol><p>最后去 Cloudflare Pages 后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）</p><table><thead><tr><th>环境变量</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><code>TG_Bot_Token</code></td><td><code>123468:AAxxxGKrn5</code></td><td>从 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0JvdEZhdGhlcg==">@BotFather</a> 获取的 Telegram Bot Token。</td></tr><tr><td><code>TG_Chat_ID</code></td><td><code>-1234567</code></td><td>频道的 ID，确保 TG Bot 是该频道或群组的管理员。</td></tr></tbody></table><h2 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h2><h3 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h3><p>你唯一需要提前准备的就是一个 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v">Cloudflare</a> 账户</p><h3 id="部署教程："><a href="#部署教程：" class="headerlink" title="部署教程："></a>部署教程：</h3><p>简单 3 步，即可部署本项目，拥有自己的图床</p><p>1.下载或 Fork 本仓库 (注意：目前请使用 fork) 【<a href="https://www.freedidi.com/?golink=aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZQ==">仓库链接</a>】</p><p>2.打开 Cloudflare Dashboard，进入 Pages 管理页面，选择创建项目，如果在第一步中选择的是 fork 本仓库，则选择 <code>连接到 Git 提供程序</code>，如果第一步中选择的是下载本仓库则选择 <code>直接上传</code> <img src="https://www.freedidi.com/wp-content/uploads/2025/07/130650-.png" alt="1"></p><ol start="3"><li>按照页面提示输入项目名称，选择需要连接的 Git 仓库（第一步选择的是 fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击 <code>部署站点</code> 即可完成部署</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>1.无限图片储存数量，你可以上传不限数量的图片</p><p>2.无需购买服务器，托管于 Cloudflare 的网络上，当使用量不超过 Cloudflare 的免费额度时，完全免费</p><p>3.无需购买域名，可以使用 Cloudflare Pages 提供的 <code>*.pages.dev</code> 的免费二级域名，同时也支持绑定自定义域名</p><p>4.支持图片审查 API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p><p>5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>在 pages 的自定义域里面，绑定 cloudflare 中存在的域名，在 cloudflare 托管的域名，自动会修改 dns 记录 <img src="https://www.freedidi.com/wp-content/uploads/2025/07/130651-.png" alt="2"></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1.由于图片文件实际存储于 Telegraph，Telegraph 限制上传的图片大小最大为 5MB</p><p>2.由于使用 Cloudflare 的网络，图片的加载速度在某些地区可能得不到保证</p><p>3.Cloudflare Function 免费版每日限制 100,000 个请求（即上传或是加载图片的总次数不能超过 100,000 次）, 正常使用已经足够！</p><hr><p>转载自<a href="https://www.freedidi.com/19912.html">零度解说</a></p><p><a href="https://www.youtube.com/watch?v=JHuISEj83ws">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>workers部署极简图床</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/workers%E9%83%A8%E7%BD%B2%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8A/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/workers%E9%83%A8%E7%BD%B2%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p><a href="https://github.com/git80123/r2-img">https://github.com/git80123/r2-img</a></p><h2 id="部署教程："><a href="#部署教程：" class="headerlink" title="部署教程："></a>部署教程：</h2><h3 id="1-创建-Cloudflare-R2-存储桶"><a href="#1-创建-Cloudflare-R2-存储桶" class="headerlink" title="1. 创建 Cloudflare R2 存储桶"></a>1. 创建 Cloudflare R2 存储桶</h3><ol><li>进入 Cloudflare Dashboard，创建一个 R2 Bucket（如：<code>img-bed</code>）。</li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699010949-%E5%88%9B%E5%BB%BAR2.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699361169-%E5%88%9B%E5%BB%BAR22.png"></p><h3 id="2-部署-Cloudflare-Worker"><a href="#2-部署-Cloudflare-Worker" class="headerlink" title="2. 部署 Cloudflare Worker"></a>2. 部署 Cloudflare Worker</h3><ol><li>新建一个 Worker 服务，拷贝本仓库的 <code>worker.js</code> 代码到 Worker 编辑器。</li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699522658-%E5%88%9B%E5%BB%BAWK.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699607340-hello%20world.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699717430-%E9%83%A8%E7%BD%B2wk.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699820617-%E9%80%89%E6%8B%A9%E7%BC%96%E8%BE%91%E4%BB%A3%E7%A0%81.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700042586-%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700200532-%E9%83%A8%E7%BD%B2.png"></p><ol start="2"><li><p>在 Worker 的环境变量中配置以下内容：</p><ul><li><code>password</code>: 管理员登录密码（如：<code>yourpassword</code>）</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700294915-%E8%AE%BE%E7%BD%AE.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700403745-%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png"></p></li><li><p>绑定 R2 存储到 Worker（Workers 仪表板 → 设置 → R2 Integration）。</p><ul><li><code>r2</code>：绑定R2存储桶变量名称</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700590666-%E6%B7%BB%E5%8A%A0%E7%BB%91%E5%AE%9A.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700680812-%E6%B7%BB%E5%8A%A0R2%E7%BB%91%E5%AE%9A.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700828484-%E9%83%A8%E7%BD%B2R2.png"></p></li><li><p>部署并访问 Worker 域名,由于是部署workers，需要绑定自定义域名</p></li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700910989-%E9%83%A8%E7%BD%B2R2.png"></p><h3 id="3-使用说明"><a href="#3-使用说明" class="headerlink" title="3. 使用说明"></a>3. 使用说明</h3><ul><li><strong>首次访问</strong>：进入首页，输入用户名 <code>admin</code> 和你在环境变量设置的密码登录。</li><li><strong>上传图片</strong>：选择图片文件（支持 jpg&#x2F;jpeg&#x2F;png&#x2F;webp，最大 5MB），可填写上传路径（文件夹）。</li><li><strong>上传成功</strong>：页面将显示图片预览，并可一键复制 Markdown、HTML 代码或直链。</li><li><strong>后台管理</strong>：点击“进入后台”可管理所有图片，支持按文件夹浏览、复制链接等操作。</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753701020978-%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/123%2F1753701315652-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF优选SaaS回源</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/CF%E4%BC%98%E9%80%89SaaS%E5%9B%9E%E6%BA%90/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/CF%E4%BC%98%E9%80%89SaaS%E5%9B%9E%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ul><li>开通SaaS功能的cloudflare账号（需绑定信用卡）</li><li>一个托管cloudflare的域名</li><li>一个非托管cloudflare的域名，例如：saas.xxx.cn（避免冲突）</li><li>部署好一个网站：例如：<a href="http://www.xxx.com(在cloudflare上已指向该网站)/">www.xxx.com(在cloudflare上已指向该网站)</a></li></ul><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><ol><li><p>选择一个托管在cloudflare上的域名（指向网站的域名，即<a href="http://www.xxx.com),点击ssl目录下的自定义主机名/">www.xxx.com），点击SSL目录下的自定义主机名</a></p></li><li><p>添加回源域名：<a href="http://www.xxx.com/">www.xxx.com</a><br>等待一分钟左右</p></li><li><p>添加自定义主机名：saas.xxx.cn</p></li><li><p>打开saas.xxx.cn域名网站或该域名的托管网站</p></li><li><p>添加一条CNAME记录：</p></li></ol><ul><li><p>分别复制自定义主机名的DCV委派下的名称和值，例如，名称： <strong>_acme-dfij11laifj.<hostname></strong> ，值： <strong>92afidjdk49jaf84.dav.cloudflare.com</strong></p></li><li><p>在saas.xxx.cn网站上添加CNAME记录，名称： <strong>_acme-dfij11laifj.saas</strong> (<hostname>改为saas.xxx.cn的前缀，也就是saas)；值： <strong>saas.xxx.cn.92afidjdk49jaf84.dav.cloudflare.com</strong> （在DCV上面复制的那个值的前面添加完整的域名）</p></li><li><p>再添加一条CNAME记录： <strong>saas.xxx.cn</strong> 指向： <strong><a href="http://www.xxx.com/">www.xxx.com</a></strong></p></li><li><p>可通过itdog输入saas.xxx.cn进行验证解析，多验证几次（更新cloudflare缓存）</p></li></ul><p>注意：也可以不通过DCV的名称和值进行添加CNAME记录，可以在自定义主机名中复制TXT记录，到saas.xxx.cn中添加TXT记录</p><ul><li><p>在部署网站的平台中，添加saas.xxx.cn这条CNAME记录</p></li><li><p>回到saas.xxx.cn网站，删除那条指向 <strong><a href="http://www.xxx.com/">www.xxx.com</a></strong> 的CNAME记录，并重新添加一条指向优选域名的记录，例如：优选域名为：cdn.2020111.xyz，那么名称为 <strong>saas</strong> ，指向 <strong>cdn.2020111.xyz</strong></p></li></ul><p>优选域名网站：<br><a href="https://www.wetest.vip/page/cloudflare/cname.html">CloudFlare公共优选Cname域名地址</a><br><a href="https://www.wetest.vip/page/cloudfront/cname.html">CloudFlare公共优选Cname域名地址</a></p><hr><p>转载自：<a href="https://www.kxzxs.com/archives/cf-saas-domain">科技自习室</a></p><p>视频教程：<a href="https://www.youtube.com/watch?v=Mbxq00JVmMQ&t=618s">点击前往</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wokerAI部署文生图</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/wokerAI%E9%83%A8%E7%BD%B2%E6%96%87%E7%94%9F%E5%9B%BE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/wokerAI%E9%83%A8%E7%BD%B2%E6%96%87%E7%94%9F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>github项目：<br><a href="https://github.com/git80123/cf-ai-image">https://github.com/git80123/cf-ai-image</a></p><ol><li><p>在cloudflare上创建一个workers</p></li><li><p>复制github中的<a href="https://github.com/git80123/cf-ai-image/blob/main/worker.js">worker.js</a>，到cloudflare编辑代码中</p></li><li><p>更改密码：在第75行代码的<strong>admin123</strong>更改为自己想要的密码</p></li><li><p>在cloudflare编辑代码中，添加一个新文件，复制<a href="https://github.com/git80123/cf-ai-image/blob/main/index.html">index.html</a>到cloudflare的编辑代码中</p></li><li><p>在cloudflare中的绑定选项中，添加绑定workers AI，变量名称为：<code>AI</code></p></li><li><p>绑定域名即可</p></li></ol><hr><p>使用方法：</p><ul><li>高级选项中的图像宽度和高度不要拉到2048*2048（像素太高会很慢，并且有时候会生成不出来）</li><li>引导系数最好在10以内</li><li>迭代步数选择20,（选择最高即可）</li><li>模型推荐使用第一个和第二个，剩下的用的比较少</li></ul><hr><p><a href="https://www.youtube.com/watch?v=wSdpCaWCzzo">视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文生图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/hello-world/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
