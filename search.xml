<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown语法</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github自动同步项目</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="PS-建议使用第二种方法"><a href="#PS-建议使用第二种方法" class="headerlink" title="PS:建议使用第二种方法"></a>PS:建议使用第二种方法</h2><p>首先打开<strong>Actions</strong>页面 新建<br><strong>workflow</strong><br>（第一种方法 ）<br>首先打开你Fork的项目，打开<strong>Actions</strong>页面,点击<strong>new workflow</strong>，选择<strong>set up a workflow yourself</strong>进入编辑页面。</p><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><p>文件取名为<code>sync.yml</code>，然后输入以下代码:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Upstream</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">    <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span></span><br><span class="line">    <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">    <span class="attr">sync_with_upstream:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">with</span> <span class="string">Upstream</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.repository.fork</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">target</span> <span class="string">repo</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">Upstream</span></span><br><span class="line">              <span class="attr">uses:</span> <span class="string">aormsby/Fork-Sync-With-Upstream-action@v3.4</span></span><br><span class="line">              <span class="attr">with:</span></span><br><span class="line">                  <span class="attr">target_repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">                  <span class="attr">upstream_sync_repo:</span> <span class="string">shaoyouvip/uptime</span></span><br><span class="line">                  <span class="attr">upstream_sync_branch:</span> <span class="string">main</span></span><br><span class="line">                  <span class="attr">target_sync_branch:</span> <span class="string">main</span></span><br><span class="line">                  <span class="attr">test_mode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">for</span> <span class="string">Failure</span></span><br><span class="line">              <span class="attr">if:</span> <span class="string">failure()</span></span><br><span class="line">              <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                  echo &quot;[Error] Due to a change in the workflow file of the upstream repository, GitHub has automatically suspended the scheduled automatic update. You need to manually sync your fork.&quot;</span></span><br><span class="line"><span class="string">                  exit 1</span></span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ol><li>定时任务执行间隔<br>修改cron项，这里是0 0 * * *，代表每天0点执行一次</li><li>要同步的仓库路径<br>修改upstream_sync_repo项，这里要填你fork的仓库路径，在你fork项目的的名字下方能看到</li><li>同步分支名称（ 超级无敌要注意 ）<br>修改upstream_sync_branch和target_sync_branch项，填写你要同步分支的名称，例如我填的main，一般来说fork的分支名称都一样，但这只是一般情况，也有的老项目默认的分支不是main，在Sync Upstream步骤中请一定确保你上游项目的分支路径。</li></ol><p>提交保持文件<br>填写完成后点右上角<strong>commit changes</strong>，然后确认。</p><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>回到<strong>Actions</strong>页面，点击你刚刚创建的<strong>workflow</strong>，点击<strong>Run workflow</strong></p><h2 id="运行成功"><a href="#运行成功" class="headerlink" title="运行成功"></a>运行成功</h2><p>刷新页面可以看到效果</p><h2 id="使用-Pull-自动同步（第二种方法-）"><a href="#使用-Pull-自动同步（第二种方法-）" class="headerlink" title="使用 Pull 自动同步（第二种方法 ）"></a>使用 Pull 自动同步（第二种方法 ）</h2><p><code>设置 Pull 帮助我们和上游保持一致同步</code></p><ol><li>打开 <a href="https://github.com/apps/pull">https://github.com/apps/pull</a> 点击右上角安装，选择你的账户。</li><li>选择你要同步的项目，选择储存库不要选所有储存库，有些项目并不是最新的就是好的。你自己选择。</li><li>下次如要添加新的项目同步可以在你的GitHub 账户设置</li><li>找到 <strong>Applications</strong>应用 <strong>Configure</strong>配置你的 新项目</li><li>选择你要同步的项目就可以了，完事结束！</li></ol><hr><p>转载自<a href="https://blog.zrf.me/p/64/">周润发</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github自动同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github新闻推送机器人</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E6%96%B0%E9%97%BB%E6%8E%A8%E9%80%81%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/github%E6%96%B0%E9%97%BB%E6%8E%A8%E9%80%81%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>github项目地址：</p><p><a href="https://github.com/git80123/TrendRadar">https://github.com/git80123/TrendRadar</a></p><h2 id="教程："><a href="#教程：" class="headerlink" title="教程："></a>教程：</h2><ol><li><p>Fork <a href="https://github.com/git80123/TrendRadar">本项目</a>到你的 GitHub 账户</p></li><li><p>设置 GitHub Secrets（选择你需要的平台）:<br>在你 Fork 后的仓库中，进入 Settings &gt; Secrets and variables &gt; Actions &gt; New repository secret，然后根据需要配置以下任一或多个通知平台：</p></li></ol><p>可以同时配置多个平台，系统会向所有配置的平台发送通知。</p><p>机器人获取步骤与添加机密变量在github上查看</p><ol start="3"><li>配置关键词和设置:</li></ol><ul><li>关键词配置: 修改 config&#x2F;frequency_words.txt 文件，添加你关心的关键词</li><li>运行模式配置: 在 config&#x2F;config.yaml 中修改 report.mode 设置：<table><thead><tr><th>模式</th><th>推送时机</th><th>显示内容</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>当日汇总模式</strong><br/><code>daily</code></td><td>按时推送</td><td>当日所有匹配新闻<br/>+ 新增新闻区域</td><td>日报总结<br/>全面了解当日热点趋势</td></tr><tr><td><strong>当前榜单模式</strong><br/><code>current</code></td><td>按时推送</td><td>当前榜单匹配新闻<br/>+ 新增新闻区域</td><td>实时热点追踪<br/>了解当前最火的内容</td></tr><tr><td><strong>增量监控模式</strong><br/><code>incremental</code></td><td>有新增才推送</td><td>新出现的匹配频率词新闻</td><td>避免重复信息干扰<br/>高频监控场景</td></tr></tbody></table></li></ul><ol start="4"><li>自动运行:</li></ol><ul><li>项目已包含.github&#x2F;workflows&#x2F;crawler.yml配置文件，默认每 30 分钟自动运行一次</li><li>你也可以在 GitHub 仓库的 Actions 页面手动触发运行</li></ul><ol start="5"><li>查看结果:</li></ol><ul><li>运行结果将自动保存在仓库的output目录中</li><li>同时通过配置的机器人发送通知到你的群组</li></ul><h3 id="🔧-自定义监控平台"><a href="#🔧-自定义监控平台" class="headerlink" title="🔧 自定义监控平台"></a>🔧 自定义监控平台</h3><p>本项目的资讯数据来源于 <a href="https://github.com/ourongxing/newsnow">newsnow</a> ，你可以点击<a href="https://newsnow.busiyi.world/">网站</a>，点击[更多]，查看是否有你想要的平台。</p><p>具体添加可访问 <a href="https://github.com/ourongxing/newsnow/tree/main/server/sources">项目源代码</a>，根据里面的文件名，在 config&#x2F;config.yaml 文件中修改 platforms 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">platforms:</span><br><span class="line">  - id: &quot;toutiao&quot;</span><br><span class="line">    name: &quot;今日头条&quot;</span><br><span class="line">  - id: &quot;baidu&quot;  </span><br><span class="line">    name: &quot;百度热搜&quot;</span><br><span class="line">  - id: &quot;wallstreetcn-hot&quot;</span><br><span class="line">    name: &quot;华尔街见闻&quot;</span><br><span class="line">  # 添加更多平台...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tg新闻推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare免费图床教程</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/cloudflare%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/cloudflare%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-fork-GitHub项目"><a href="#1-fork-GitHub项目" class="headerlink" title="1. fork GitHub项目"></a>1. fork GitHub项目</h2><h3 id="【点击前往】"><a href="#【点击前往】" class="headerlink" title="【点击前往】"></a><a href="https://github.com/MarSeventh/CloudFlare-ImgBed">【点击前往】</a></h3><h2 id="2-登录cloudflare账号"><a href="#2-登录cloudflare账号" class="headerlink" title="2. 登录cloudflare账号"></a>2. 登录cloudflare账号</h2><ul><li>在workers和pages中选择pages</li><li>选择刚刚fork的项目，开始设置</li><li>项目名称自己随意命名</li><li>构建命令：<code>npm install</code></li><li>其他保持默认即可，点击保存并部署</li></ul><h2 id="3-点击存储和数据库，创建一个KV空间，名字：img-url"><a href="#3-点击存储和数据库，创建一个KV空间，名字：img-url" class="headerlink" title="3. 点击存储和数据库，创建一个KV空间，名字：img_url"></a>3. 点击存储和数据库，创建一个KV空间，名字：<code>img_url</code></h2><h2 id="4-点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed-位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可"><a href="#4-点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed-位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可" class="headerlink" title="4. 点击R2对象存储，创建一个存储桶，名称可以随意命名，例：imgbed,位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可"></a>4. 点击R2对象存储，创建一个存储桶，名称可以随意命名，例：<code>imgbed</code>,位置在自动的选项中选择亚太地区（默认是欧美地区），点击创建存储桶即可</h2><h2 id="5-回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶："><a href="#5-回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶：" class="headerlink" title="5. 回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶："></a>5. 回到刚刚创建好的pages项目，点击设置，选择绑定，需要绑定KV空间和R2存储桶：</h2><p>KV空间变量名称：<code>img_url</code><br>R2存储桶变量名称：<code>img_r2</code><br>值就是刚刚创建好的KV空间名称和R2存储桶名称</p><h2 id="6-绑定域名"><a href="#6-绑定域名" class="headerlink" title="6. 绑定域名"></a>6. 绑定域名</h2><h2 id="7-点击上方的部署，重试部署即可访问域名"><a href="#7-点击上方的部署，重试部署即可访问域名" class="headerlink" title="7. 点击上方的部署，重试部署即可访问域名"></a>7. 点击上方的部署，重试部署即可访问域名</h2><p>登录绑定好的域名，点击右下方的设置图标，再点击左上角的三条横杆，选择系统设置</p><h3 id="1-上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https-xxx-xxx-com），注意后面不要有-，点击保存设置即可"><a href="#1-上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https-xxx-xxx-com），注意后面不要有-，点击保存设置即可" class="headerlink" title="1. 上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：https://xxx.xxx.com），注意后面不要有 &#x2F;，点击保存设置即可"></a>1. 上传设置：选择cloudflareR2，公开访问链接就是绑定的域名但是要注意的是要加前面的https（例：<a href="https://xxx.xxx.com),注意后面不要有/">https://xxx.xxx.com），注意后面不要有</a> <strong>&#x2F;</strong>，点击保存设置即可</h3><h3 id="2-安全设置："><a href="#2-安全设置：" class="headerlink" title="2. 安全设置："></a>2. 安全设置：</h3><ul><li>上传密码就是在上传图片的时候需要密码才可以上传图片（R2存储空间每个月10g，空间有限，一般情况下个人够用，所以尽量还是设置一个上传密码，不设置密码，所有人都可以上传）</li><li>设置用户名和密码，其他保持不变，保存即可</li></ul><h3 id="3-网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）："><a href="#3-网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）：" class="headerlink" title="3. 网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）："></a>3. 网页设置（因为刚刚设置了密码，所以会跳转到登录页面，输入用户名和密码即可）：</h3><ul><li>默认URL前缀输入自己的域名，要加https（例：<a href="https://xxx.xxx.com/%EF%BC%89%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%90%8E%E9%9D%A2%E5%8C%85%E5%90%AB">https://xxx.xxx.com/），注意后面包含</a> <strong>&#x2F;</strong> ,其他根据各自的情况修改，保存即可</li></ul><hr><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><h3 id="1-本地上传"><a href="#1-本地上传" class="headerlink" title="1. 本地上传"></a>1. 本地上传</h3><p>点击相机图标，选择要上传的图片，可以多选，第一次上传会提示失败，因为还没有输入上传密码，输入密码后重新上传即可<br>右上角可以输入上传目录，先输入自己想要的上传的目录（自动创建），然后上传图片就会存到该目录</p><h3 id="2-URL上传"><a href="#2-URL上传" class="headerlink" title="2. URL上传"></a>2. URL上传</h3><p>点击右上角的文件夹图标，即切换上传方式，在输入框中输入图片或视频的URL链接，点击上传即可（即输入图片链接，自动下载到文件夹中）<br>外链上传：存入别人的图片链接，无需下载图片，当使用该图片时，用的不是自己的链接，而是原作者的链接</p><hr><p><a href="https://www.youtube.com/watch?v=etxnI8qGVBg">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare搭建你的AI图片生成站,免费Flux.1文生图</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/workerAIflux1%E6%96%87%E7%94%9F%E5%9B%BE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/workerAIflux1%E6%96%87%E7%94%9F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="github项目："><a href="#github项目：" class="headerlink" title="github项目："></a>github项目：</h2><p><a href="https://github.com/aigem/cf-flux-remix">https://github.com/aigem/cf-flux-remix</a></p><h2 id="cloudflare部署："><a href="#cloudflare部署：" class="headerlink" title="cloudflare部署："></a>cloudflare部署：</h2><p>1、新建一个worker<br>名称为 free-flux （与wrangler.toml文件中的名称一致，或自定义名称，在github的wrangler.toml文件中更改名称）. <strong>注意</strong>此名称必须与Github中的Wrangler.toml文件中的名称一致。</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788160170-%E5%88%9B%E5%BB%BAworkers.png"></p><p>2、worker后台设置中绑定Github仓库，绑定Fork的本仓库</p><p>3、填入构建命令等<br>构建命令（可选）： pnpm install<br>部署命令： pnpm run deploy</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788205368-%E8%BF%9E%E6%8E%A5git.png"></p><p>4、触发CF Workers中部署<br>随便改动一下仓库readme文件，提交后自动触发部署</p><p>5、部署完成<br>部署完成后打开相应网站来使用，API使用看下面的说明<br>记得在worker后台设置环境变量，替换自己的CF账号ID及API令牌<br>API令牌要有Workers AI 的读取及编辑权限。</p><h2 id="cloudflare-ID和API获取"><a href="#cloudflare-ID和API获取" class="headerlink" title="cloudflare ID和API获取"></a>cloudflare ID和API获取</h2><p>cloudflareID：</p><p><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788812878-%E8%B4%A6%E6%88%B7ID%E8%8E%B7%E5%8F%96.png"></p><p>API获取：</p><p>1.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788882130-%E7%AE%A1%E7%90%86API.png"></p><p>2.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753788947489-%E5%88%9B%E5%BB%BA%E4%BB%A4%E7%89%8C.png"></p><p>3.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753789012209-workersAI%E6%A8%A1%E6%9D%BF.png"></p><p>4.<br><img src="https://wktc.ddkk.pp.ua/img/flux%E6%96%87%E7%94%9F%E5%9B%BE%2F1753789172809-%E9%80%89%E6%8B%A9%E6%89%80%E6%9C%89%E8%B4%A6%E6%88%B7.png"></p><ol start="5"><li>创建令牌，即可看到api令牌，与账户ID一起复制到<br><code>CF_ACCOUNT_LIST</code>变量中即可</li></ol><hr><p><a href="https://www.bilibili.com/video/BV1Wz2NYyEmW/?vd_source=b081dd3783684566bfe9c7b9f0a29d79">视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文生图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/tg%E5%9B%BE%E5%BA%8A/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/tg%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>由于原有的 Telegraph API 接口被官方关闭，需要将上传渠道切换至 Telegram Channel，请按照文档中的部署要求设置 <code>TG_Bot_Token</code> 和 <code>TG_Chat_ID</code>，否则将无法正常使用上传功能。</p><h2 id="如何获取-Telegram-的-Bot-Token-和-Chat-ID"><a href="#如何获取-Telegram-的-Bot-Token-和-Chat-ID" class="headerlink" title="如何获取 Telegram 的 Bot_Token 和 Chat_ID"></a>如何获取 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90ZWxlZ3JhbS5vcmcv">Telegram</a> 的 <code>Bot_Token</code> 和 <code>Chat_ID</code></h2><p>如果您还没有 Telegram 账户，请先创建一个。接着，按照以下步骤操作以获取 <code>BOT_TOKEN</code> 和 <code>CHAT_ID</code>：</p><ol><li><strong>获取 <code>Bot_Token</code></strong><ul><li>在 Telegram 中，向 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0JvdEZhdGhlcg==">@BotFather</a> 发送命令 <code>/newbot</code>，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个 <code>BOT_TOKEN</code>，用于与 Telegram API 进行交互。</li></ul></li></ol><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142849-.png" alt="202409071744569"></p><ol start="2"><li><strong>设置机器人为频道管理员</strong><ul><li>创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。</li></ul></li></ol><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142850-.png" alt="202409071758534"></p><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142851-.png" alt="202409071758796"></p><ol start="3"><li><p><strong>获取 <code>Chat_ID</code></strong></p><ul><li>通过 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL1ZlcnNhVG9vbHNCb3Q=">@VersaToolsBot</a> 获取您的频道 ID。向该机器人发送消息，按照指示操作，最后您将得到 <code>CHAT_ID</code>（即频道的 ID）。</li><li>或者通过 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0dldFRoZWlySURCb3Q=">@GetTheirIDBot</a> 获取您的频道 ID。向该机器人发送消息，按照指示操作，最后您将得到 <code>CHAT_ID</code>（即频道的 ID）。</li></ul><p><img src="https://www.freedidi.com/wp-content/uploads/2025/07/142851-1-1.png" alt="202409071751619"></p></li></ol><p>最后去 Cloudflare Pages 后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）</p><table><thead><tr><th>环境变量</th><th>示例值</th><th>说明</th></tr></thead><tbody><tr><td><code>TG_Bot_Token</code></td><td><code>123468:AAxxxGKrn5</code></td><td>从 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly90Lm1lL0JvdEZhdGhlcg==">@BotFather</a> 获取的 Telegram Bot Token。</td></tr><tr><td><code>TG_Chat_ID</code></td><td><code>-1234567</code></td><td>频道的 ID，确保 TG Bot 是该频道或群组的管理员。</td></tr></tbody></table><h2 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h2><h3 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h3><p>你唯一需要提前准备的就是一个 <a href="https://www.freedidi.com/?golink=aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20v">Cloudflare</a> 账户</p><h3 id="部署教程："><a href="#部署教程：" class="headerlink" title="部署教程："></a>部署教程：</h3><p>简单 3 步，即可部署本项目，拥有自己的图床</p><p>1.下载或 Fork 本仓库 (注意：目前请使用 fork) 【<a href="https://www.freedidi.com/?golink=aHR0cHM6Ly9naXRodWIuY29tL2NmLXBhZ2VzL1RlbGVncmFwaC1JbWFnZQ==">仓库链接</a>】</p><p>2.打开 Cloudflare Dashboard，进入 Pages 管理页面，选择创建项目，如果在第一步中选择的是 fork 本仓库，则选择 <code>连接到 Git 提供程序</code>，如果第一步中选择的是下载本仓库则选择 <code>直接上传</code> <img src="https://www.freedidi.com/wp-content/uploads/2025/07/130650-.png" alt="1"></p><ol start="3"><li>按照页面提示输入项目名称，选择需要连接的 Git 仓库（第一步选择的是 fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击 <code>部署站点</code> 即可完成部署</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>1.无限图片储存数量，你可以上传不限数量的图片</p><p>2.无需购买服务器，托管于 Cloudflare 的网络上，当使用量不超过 Cloudflare 的免费额度时，完全免费</p><p>3.无需购买域名，可以使用 Cloudflare Pages 提供的 <code>*.pages.dev</code> 的免费二级域名，同时也支持绑定自定义域名</p><p>4.支持图片审查 API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p><p>5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>在 pages 的自定义域里面，绑定 cloudflare 中存在的域名，在 cloudflare 托管的域名，自动会修改 dns 记录 <img src="https://www.freedidi.com/wp-content/uploads/2025/07/130651-.png" alt="2"></p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1.由于图片文件实际存储于 Telegraph，Telegraph 限制上传的图片大小最大为 5MB</p><p>2.由于使用 Cloudflare 的网络，图片的加载速度在某些地区可能得不到保证</p><p>3.Cloudflare Function 免费版每日限制 100,000 个请求（即上传或是加载图片的总次数不能超过 100,000 次）, 正常使用已经足够！</p><hr><p>转载自<a href="https://www.freedidi.com/19912.html">零度解说</a></p><p><a href="https://www.youtube.com/watch?v=JHuISEj83ws">视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>workers部署极简图床</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/workers%E9%83%A8%E7%BD%B2%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8A/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/workers%E9%83%A8%E7%BD%B2%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h2><p><a href="https://github.com/git80123/r2-img">https://github.com/git80123/r2-img</a></p><h2 id="部署教程："><a href="#部署教程：" class="headerlink" title="部署教程："></a>部署教程：</h2><h3 id="1-创建-Cloudflare-R2-存储桶"><a href="#1-创建-Cloudflare-R2-存储桶" class="headerlink" title="1. 创建 Cloudflare R2 存储桶"></a>1. 创建 Cloudflare R2 存储桶</h3><ol><li>进入 Cloudflare Dashboard，创建一个 R2 Bucket（如：<code>img-bed</code>）。</li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699010949-%E5%88%9B%E5%BB%BAR2.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699361169-%E5%88%9B%E5%BB%BAR22.png"></p><h3 id="2-部署-Cloudflare-Worker"><a href="#2-部署-Cloudflare-Worker" class="headerlink" title="2. 部署 Cloudflare Worker"></a>2. 部署 Cloudflare Worker</h3><ol><li>新建一个 Worker 服务，拷贝本仓库的 <code>worker.js</code> 代码到 Worker 编辑器。</li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699522658-%E5%88%9B%E5%BB%BAWK.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699607340-hello%20world.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699717430-%E9%83%A8%E7%BD%B2wk.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753699820617-%E9%80%89%E6%8B%A9%E7%BC%96%E8%BE%91%E4%BB%A3%E7%A0%81.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700042586-%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700200532-%E9%83%A8%E7%BD%B2.png"></p><ol start="2"><li><p>在 Worker 的环境变量中配置以下内容：</p><ul><li><code>password</code>: 管理员登录密码（如：<code>yourpassword</code>）</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700294915-%E8%AE%BE%E7%BD%AE.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700403745-%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png"></p></li><li><p>绑定 R2 存储到 Worker（Workers 仪表板 → 设置 → R2 Integration）。</p><ul><li><code>r2</code>：绑定R2存储桶变量名称</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700590666-%E6%B7%BB%E5%8A%A0%E7%BB%91%E5%AE%9A.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700680812-%E6%B7%BB%E5%8A%A0R2%E7%BB%91%E5%AE%9A.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700828484-%E9%83%A8%E7%BD%B2R2.png"></p></li><li><p>部署并访问 Worker 域名,由于是部署workers，需要绑定自定义域名</p></li></ol><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753700910989-%E9%83%A8%E7%BD%B2R2.png"></p><h3 id="3-使用说明"><a href="#3-使用说明" class="headerlink" title="3. 使用说明"></a>3. 使用说明</h3><ul><li><strong>首次访问</strong>：进入首页，输入用户名 <code>admin</code> 和你在环境变量设置的密码登录。</li><li><strong>上传图片</strong>：选择图片文件（支持 jpg&#x2F;jpeg&#x2F;png&#x2F;webp，最大 5MB），可填写上传路径（文件夹）。</li><li><strong>上传成功</strong>：页面将显示图片预览，并可一键复制 Markdown、HTML 代码或直链。</li><li><strong>后台管理</strong>：点击“进入后台”可管理所有图片，支持按文件夹浏览、复制链接等操作。</li></ul><p><img src="https://wktc.ddkk.pp.ua/img/wk%E5%9B%BE%E5%BA%8A%2F1753701020978-%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png"></p><p><img src="https://wktc.ddkk.pp.ua/img/123%2F1753701315652-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF优选SaaS回源</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/CF%E4%BC%98%E9%80%89SaaS%E5%9B%9E%E6%BA%90/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/CF%E4%BC%98%E9%80%89SaaS%E5%9B%9E%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ul><li>开通SaaS功能的cloudflare账号（需绑定信用卡）</li><li>一个托管cloudflare的域名</li><li>一个非托管cloudflare的域名，例如：saas.xxx.cn（避免冲突）</li><li>部署好一个网站：例如：<a href="http://www.xxx.com(在cloudflare上已指向该网站)/">www.xxx.com(在cloudflare上已指向该网站)</a></li></ul><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><ol><li><p>选择一个托管在cloudflare上的域名（指向网站的域名，即<a href="http://www.xxx.com),点击ssl目录下的自定义主机名/">www.xxx.com），点击SSL目录下的自定义主机名</a></p></li><li><p>添加回源域名：<a href="http://www.xxx.com/">www.xxx.com</a><br>等待一分钟左右</p></li><li><p>添加自定义主机名：saas.xxx.cn</p></li><li><p>打开saas.xxx.cn域名网站或该域名的托管网站</p></li><li><p>添加一条CNAME记录：</p></li></ol><ul><li><p>分别复制自定义主机名的DCV委派下的名称和值，例如，名称： <strong>_acme-dfij11laifj.<hostname></strong> ，值： <strong>92afidjdk49jaf84.dav.cloudflare.com</strong></p></li><li><p>在saas.xxx.cn网站上添加CNAME记录，名称： <strong>_acme-dfij11laifj.saas</strong> (<hostname>改为saas.xxx.cn的前缀，也就是saas)；值： <strong>saas.xxx.cn.92afidjdk49jaf84.dav.cloudflare.com</strong> （在DCV上面复制的那个值的前面添加完整的域名）</p></li><li><p>再添加一条CNAME记录： <strong>saas.xxx.cn</strong> 指向： <strong><a href="http://www.xxx.com/">www.xxx.com</a></strong></p></li><li><p>可通过itdog输入saas.xxx.cn进行验证解析，多验证几次（更新cloudflare缓存）</p></li></ul><p>注意：也可以不通过DCV的名称和值进行添加CNAME记录，可以在自定义主机名中复制TXT记录，到saas.xxx.cn中添加TXT记录</p><ul><li><p>在部署网站的平台中，添加saas.xxx.cn这条CNAME记录</p></li><li><p>回到saas.xxx.cn网站，删除那条指向 <strong><a href="http://www.xxx.com/">www.xxx.com</a></strong> 的CNAME记录，并重新添加一条指向优选域名的记录，例如：优选域名为：cdn.2020111.xyz，那么名称为 <strong>saas</strong> ，指向 <strong>cdn.2020111.xyz</strong></p></li></ul><p>优选域名网站：<br><a href="https://www.wetest.vip/page/cloudflare/cname.html">CloudFlare公共优选Cname域名地址</a><br><a href="https://www.wetest.vip/page/cloudfront/cname.html">CloudFlare公共优选Cname域名地址</a></p><hr><p>转载自：<a href="https://www.kxzxs.com/archives/cf-saas-domain">科技自习室</a></p><p>视频教程：<a href="https://www.youtube.com/watch?v=Mbxq00JVmMQ&t=618s">点击前往</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名加速 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wokerAI部署文生图</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/wokerAI%E9%83%A8%E7%BD%B2%E6%96%87%E7%94%9F%E5%9B%BE/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/wokerAI%E9%83%A8%E7%BD%B2%E6%96%87%E7%94%9F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>github项目：<br><a href="https://github.com/git80123/cf-ai-image">https://github.com/git80123/cf-ai-image</a></p><ol><li><p>在cloudflare上创建一个workers</p></li><li><p>复制github中的<a href="https://github.com/git80123/cf-ai-image/blob/main/worker.js">worker.js</a>，到cloudflare编辑代码中</p></li><li><p>更改密码：在第75行代码的<strong>admin123</strong>更改为自己想要的密码</p></li><li><p>在cloudflare编辑代码中，添加一个新文件，复制<a href="https://github.com/git80123/cf-ai-image/blob/main/index.html">index.html</a>到cloudflare的编辑代码中</p></li><li><p>在cloudflare中的绑定选项中，添加绑定workers AI，变量名称为：<code>AI</code></p></li><li><p>绑定域名即可</p></li></ol><hr><p>使用方法：</p><ul><li>高级选项中的图像宽度和高度不要拉到2048*2048（像素太高会很慢，并且有时候会生成不出来）</li><li>引导系数最好在10以内</li><li>迭代步数选择20,（选择最高即可）</li><li>模型推荐使用第一个和第二个，剩下的用的比较少</li></ul><hr><p><a href="https://www.youtube.com/watch?v=wSdpCaWCzzo">视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文生图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/%E7%89%A7%E7%BE%8A%E4%BA%BA/hello-world/"/>
      <url>/%E7%89%A7%E7%BE%8A%E4%BA%BA/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
